var SearchFiles = ["GUID-538B66D6-072E-49C9-B3DF-BBC09CF4DC65.html",
							"GUID-2167300F-6A96-440E-83CA-FC9C0C259914.html","GUID-F94F11C2-B9C2-46CA-873A-7F3BA47C12F9.html","GUID-EDAF833A-65A8-4C17-8178-AB52010F5638.html","GUID-62C7BAFF-836C-4CE5-9489-B549665C44AC.html",
							"GUID-62C7BAFF-836C-4CE5-9489-B549665C44AC.html",
							"GUID-62C7BAFF-836C-4CE5-9489-B549665C44AC.html",
							"GUID-B4147259-E267-4C02-B584-20569616762B.html",
							"GUID-B4147259-E267-4C02-B584-20569616762B.html",
							"GUID-B4147259-E267-4C02-B584-20569616762B.html",
							"GUID-B4147259-E267-4C02-B584-20569616762B.html",
							"GUID-B4147259-E267-4C02-B584-20569616762B.html",
							"GUID-F9DDA02A-03F1-4A86-8A4B-9B5067BDF410.html",
							"GUID-F9DDA02A-03F1-4A86-8A4B-9B5067BDF410.html",
							"GUID-F9DDA02A-03F1-4A86-8A4B-9B5067BDF410.html",
							"GUID-F9DDA02A-03F1-4A86-8A4B-9B5067BDF410.html",
							"GUID-F9DDA02A-03F1-4A86-8A4B-9B5067BDF410.html",
							"GUID-D20B7B50-5211-4F70-BA93-38F5AFB937FE.html",
							"GUID-D20B7B50-5211-4F70-BA93-38F5AFB937FE.html",
							"GUID-D20B7B50-5211-4F70-BA93-38F5AFB937FE.html",
							"GUID-D20B7B50-5211-4F70-BA93-38F5AFB937FE.html",
							"GUID-D20B7B50-5211-4F70-BA93-38F5AFB937FE.html",
							"GUID-5295302D-44C9-46D6-9AC9-A8EC8BD8D061.html",
							"GUID-5295302D-44C9-46D6-9AC9-A8EC8BD8D061.html",
							"GUID-5295302D-44C9-46D6-9AC9-A8EC8BD8D061.html",
							"GUID-5295302D-44C9-46D6-9AC9-A8EC8BD8D061.html",
							"GUID-5295302D-44C9-46D6-9AC9-A8EC8BD8D061.html",
							"GUID-3610DABE-8B2A-4194-ADE9-BECF2971F8B4.html",
							"GUID-3610DABE-8B2A-4194-ADE9-BECF2971F8B4.html",
							"GUID-3610DABE-8B2A-4194-ADE9-BECF2971F8B4.html",
							"GUID-3610DABE-8B2A-4194-ADE9-BECF2971F8B4.html",
							"GUID-3610DABE-8B2A-4194-ADE9-BECF2971F8B4.html",
							"GUID-AF6A889B-746F-4F65-8D41-DD8A4B8FCE9C.html",
							"GUID-AF6A889B-746F-4F65-8D41-DD8A4B8FCE9C.html",
							"GUID-AF6A889B-746F-4F65-8D41-DD8A4B8FCE9C.html",
							"GUID-AF6A889B-746F-4F65-8D41-DD8A4B8FCE9C.html",
							"GUID-AF6A889B-746F-4F65-8D41-DD8A4B8FCE9C.html",
							"GUID-4F3FCED2-8D39-4756-838A-1248B8A619A4.html","GUID-B5DC2BA6-61E5-4CF6-B9E9-C5D669141F71.html",
							"GUID-B5DC2BA6-61E5-4CF6-B9E9-C5D669141F71.html",
							"GUID-B5DC2BA6-61E5-4CF6-B9E9-C5D669141F71.html",
							"GUID-27985E91-E0D2-4FA3-8BF8-BA82656F9C77.html",
							"GUID-27985E91-E0D2-4FA3-8BF8-BA82656F9C77.html",
							"GUID-27985E91-E0D2-4FA3-8BF8-BA82656F9C77.html",
							"GUID-27985E91-E0D2-4FA3-8BF8-BA82656F9C77.html",
							"GUID-27985E91-E0D2-4FA3-8BF8-BA82656F9C77.html",
							"GUID-8793536C-F38F-43EA-A057-DE3BA9715EB9.html",
							"GUID-8793536C-F38F-43EA-A057-DE3BA9715EB9.html",
							"GUID-8793536C-F38F-43EA-A057-DE3BA9715EB9.html",
							"GUID-8793536C-F38F-43EA-A057-DE3BA9715EB9.html",
							"GUID-8793536C-F38F-43EA-A057-DE3BA9715EB9.html",
							"GUID-B7BACAEC-0E3B-473A-8B3D-346E615C76C2.html",
							"GUID-B7BACAEC-0E3B-473A-8B3D-346E615C76C2.html",
							"GUID-B7BACAEC-0E3B-473A-8B3D-346E615C76C2.html",
							"GUID-B7BACAEC-0E3B-473A-8B3D-346E615C76C2.html",
							"GUID-B7BACAEC-0E3B-473A-8B3D-346E615C76C2.html",
							"GUID-96F08F37-E558-49D3-9B97-9A086896263A.html","GUID-8DFEF195-91C1-4E48-B28E-100B98852F65.html",
							"GUID-8DFEF195-91C1-4E48-B28E-100B98852F65.html",
							"GUID-8DFEF195-91C1-4E48-B28E-100B98852F65.html",
							"GUID-8DFEF195-91C1-4E48-B28E-100B98852F65.html",
							"GUID-8DFEF195-91C1-4E48-B28E-100B98852F65.html",
							"GUID-76DB3E5C-3201-4663-937C-92CC87FC1608.html",
							"GUID-76DB3E5C-3201-4663-937C-92CC87FC1608.html",
							"GUID-76DB3E5C-3201-4663-937C-92CC87FC1608.html",
							"GUID-76DB3E5C-3201-4663-937C-92CC87FC1608.html",
							"GUID-76DB3E5C-3201-4663-937C-92CC87FC1608.html",
							"GUID-AFA1DA29-4E94-4EA3-8C98-D7181ED0C312.html",
							"GUID-AFA1DA29-4E94-4EA3-8C98-D7181ED0C312.html",
							"GUID-AFA1DA29-4E94-4EA3-8C98-D7181ED0C312.html",
							"GUID-AFA1DA29-4E94-4EA3-8C98-D7181ED0C312.html",
							"GUID-AFA1DA29-4E94-4EA3-8C98-D7181ED0C312.html",
							"GUID-1FC8FBC1-9083-451F-98AE-88094CA864C6.html",
							"GUID-1FC8FBC1-9083-451F-98AE-88094CA864C6.html",
							"GUID-1FC8FBC1-9083-451F-98AE-88094CA864C6.html",
							"GUID-1FC8FBC1-9083-451F-98AE-88094CA864C6.html",
							"GUID-1FC8FBC1-9083-451F-98AE-88094CA864C6.html",
							"GUID-B30A3A3B-5B44-4F2E-9C0E-11781DD07EC8.html",
							"GUID-B30A3A3B-5B44-4F2E-9C0E-11781DD07EC8.html",
							"GUID-B30A3A3B-5B44-4F2E-9C0E-11781DD07EC8.html",
							"GUID-B30A3A3B-5B44-4F2E-9C0E-11781DD07EC8.html",
							"GUID-B30A3A3B-5B44-4F2E-9C0E-11781DD07EC8.html",
							"GUID-D72A7B04-3F6E-408A-ADBF-AC894D945D65.html",
							"GUID-D72A7B04-3F6E-408A-ADBF-AC894D945D65.html",
							"GUID-D72A7B04-3F6E-408A-ADBF-AC894D945D65.html",
							"GUID-D72A7B04-3F6E-408A-ADBF-AC894D945D65.html",
							"GUID-D72A7B04-3F6E-408A-ADBF-AC894D945D65.html",
							"GUID-435A3048-D734-4711-9B4A-8E7035AE4747.html",
							"GUID-435A3048-D734-4711-9B4A-8E7035AE4747.html",
							"GUID-435A3048-D734-4711-9B4A-8E7035AE4747.html",
							"GUID-435A3048-D734-4711-9B4A-8E7035AE4747.html",
							"GUID-435A3048-D734-4711-9B4A-8E7035AE4747.html",
							"GUID-BBF940E8-361C-4418-AA6E-7E55FE94DD87.html","GUID-141C5854-2A82-4DAF-ACA3-C94E8C1DBE17.html",
							"GUID-141C5854-2A82-4DAF-ACA3-C94E8C1DBE17.html",
							"GUID-141C5854-2A82-4DAF-ACA3-C94E8C1DBE17.html",
							"GUID-141C5854-2A82-4DAF-ACA3-C94E8C1DBE17.html",
							"GUID-141C5854-2A82-4DAF-ACA3-C94E8C1DBE17.html",
							"GUID-1BFC4F0D-3A6E-46C0-906B-ED0B302A24A3.html",
							"GUID-1BFC4F0D-3A6E-46C0-906B-ED0B302A24A3.html",
							"GUID-1BFC4F0D-3A6E-46C0-906B-ED0B302A24A3.html",
							"GUID-1BFC4F0D-3A6E-46C0-906B-ED0B302A24A3.html",
							"GUID-1BFC4F0D-3A6E-46C0-906B-ED0B302A24A3.html",
							"GUID-1882683B-DF14-4770-9FE0-4B533354E919.html",
							"GUID-1882683B-DF14-4770-9FE0-4B533354E919.html",
							"GUID-1882683B-DF14-4770-9FE0-4B533354E919.html",
							"GUID-1882683B-DF14-4770-9FE0-4B533354E919.html",
							"GUID-1882683B-DF14-4770-9FE0-4B533354E919.html",
							"GUID-1BBFA501-F854-4426-8EB9-91B8DD825F97.html",
							"GUID-1BBFA501-F854-4426-8EB9-91B8DD825F97.html",
							"GUID-1BBFA501-F854-4426-8EB9-91B8DD825F97.html",
							"GUID-1BBFA501-F854-4426-8EB9-91B8DD825F97.html",
							"GUID-1BBFA501-F854-4426-8EB9-91B8DD825F97.html",
							"GUID-4F655CBC-2139-4E8C-89A0-5BEF04905FD5.html",
							"GUID-4F655CBC-2139-4E8C-89A0-5BEF04905FD5.html",
							"GUID-4F655CBC-2139-4E8C-89A0-5BEF04905FD5.html",
							"GUID-4F655CBC-2139-4E8C-89A0-5BEF04905FD5.html",
							"GUID-4F655CBC-2139-4E8C-89A0-5BEF04905FD5.html",
							"GUID-C54B3EAC-9FFD-458A-8EA2-388E22D8D258.html",
							"GUID-C54B3EAC-9FFD-458A-8EA2-388E22D8D258.html",
							"GUID-C54B3EAC-9FFD-458A-8EA2-388E22D8D258.html",
							"GUID-C54B3EAC-9FFD-458A-8EA2-388E22D8D258.html",
							"GUID-C54B3EAC-9FFD-458A-8EA2-388E22D8D258.html",
							"GUID-962BEC24-6270-4306-8596-236BD157D012.html",
							"GUID-962BEC24-6270-4306-8596-236BD157D012.html",
							"GUID-962BEC24-6270-4306-8596-236BD157D012.html",
							"GUID-962BEC24-6270-4306-8596-236BD157D012.html",
							"GUID-962BEC24-6270-4306-8596-236BD157D012.html",
							"GUID-F7E76DD2-FA51-4CD8-85E8-C41535248CF7.html",
							"GUID-F7E76DD2-FA51-4CD8-85E8-C41535248CF7.html",
							"GUID-F7E76DD2-FA51-4CD8-85E8-C41535248CF7.html",
							"GUID-F7E76DD2-FA51-4CD8-85E8-C41535248CF7.html",
							"GUID-F7E76DD2-FA51-4CD8-85E8-C41535248CF7.html",
							"GUID-5B276649-6DC6-4941-BF77-079C72DEF916.html",
							"GUID-5B276649-6DC6-4941-BF77-079C72DEF916.html",
							"GUID-5B276649-6DC6-4941-BF77-079C72DEF916.html",
							"GUID-A96B50BD-73CC-4162-A6FB-AECC8A95FE5B.html",
							"GUID-A96B50BD-73CC-4162-A6FB-AECC8A95FE5B.html",
							"GUID-A96B50BD-73CC-4162-A6FB-AECC8A95FE5B.html",
							"GUID-A96B50BD-73CC-4162-A6FB-AECC8A95FE5B.html",
							"GUID-A96B50BD-73CC-4162-A6FB-AECC8A95FE5B.html",
							"GUID-79402B38-EB29-45A2-B098-9C8D8FD5405D.html",
							"GUID-79402B38-EB29-45A2-B098-9C8D8FD5405D.html",
							"GUID-79402B38-EB29-45A2-B098-9C8D8FD5405D.html",
							"GUID-79402B38-EB29-45A2-B098-9C8D8FD5405D.html",
							"GUID-79402B38-EB29-45A2-B098-9C8D8FD5405D.html",
							"GUID-CF8AC400-857E-4BB4-87A4-147B8CE59C98.html",
							"GUID-CF8AC400-857E-4BB4-87A4-147B8CE59C98.html",
							"GUID-CF8AC400-857E-4BB4-87A4-147B8CE59C98.html",
							"GUID-CF8AC400-857E-4BB4-87A4-147B8CE59C98.html",
							"GUID-CF8AC400-857E-4BB4-87A4-147B8CE59C98.html",
							"GUID-CF8AC400-857E-4BB4-87A4-147B8CE59C98.html",
							"GUID-CF8AC400-857E-4BB4-87A4-147B8CE59C98.html",
							"GUID-09C83FD0-D18A-409C-89DF-0CDD7BA43CE0.html",
							"GUID-09C83FD0-D18A-409C-89DF-0CDD7BA43CE0.html",
							"GUID-09C83FD0-D18A-409C-89DF-0CDD7BA43CE0.html",
							"GUID-09C83FD0-D18A-409C-89DF-0CDD7BA43CE0.html",
							"GUID-09C83FD0-D18A-409C-89DF-0CDD7BA43CE0.html",
							"GUID-4F0A69F2-47CB-4CDE-BBBB-020E3AD7A253.html",
							"GUID-4F0A69F2-47CB-4CDE-BBBB-020E3AD7A253.html",
							"GUID-4F0A69F2-47CB-4CDE-BBBB-020E3AD7A253.html",
							"GUID-4F0A69F2-47CB-4CDE-BBBB-020E3AD7A253.html",
							"GUID-4F0A69F2-47CB-4CDE-BBBB-020E3AD7A253.html",
							"GUID-9F5447FF-EF42-4AC4-ADCF-1C0C2E5173CE.html","GUID-A760B515-B9F4-4861-A9EB-FD80AAE94F30.html",
							"GUID-A760B515-B9F4-4861-A9EB-FD80AAE94F30.html",
							"GUID-A760B515-B9F4-4861-A9EB-FD80AAE94F30.html",
							"GUID-A760B515-B9F4-4861-A9EB-FD80AAE94F30.html",
							"GUID-A760B515-B9F4-4861-A9EB-FD80AAE94F30.html",
							"GUID-92FB9B7E-F107-4994-8429-FFABC896EAF4.html",
							"GUID-92FB9B7E-F107-4994-8429-FFABC896EAF4.html",
							"GUID-92FB9B7E-F107-4994-8429-FFABC896EAF4.html",
							"GUID-92FB9B7E-F107-4994-8429-FFABC896EAF4.html",
							"GUID-92FB9B7E-F107-4994-8429-FFABC896EAF4.html",
							"GUID-3944574B-BC67-49E4-BFFF-A0E5EB7CF533.html",
							"GUID-3944574B-BC67-49E4-BFFF-A0E5EB7CF533.html",
							"GUID-3944574B-BC67-49E4-BFFF-A0E5EB7CF533.html",
							"GUID-3944574B-BC67-49E4-BFFF-A0E5EB7CF533.html",
							"GUID-3944574B-BC67-49E4-BFFF-A0E5EB7CF533.html",
							"GUID-1CB186D5-ECE4-41BE-BADE-FC0E1577DF44.html",
							"GUID-1CB186D5-ECE4-41BE-BADE-FC0E1577DF44.html",
							"GUID-1CB186D5-ECE4-41BE-BADE-FC0E1577DF44.html",
							"GUID-1CB186D5-ECE4-41BE-BADE-FC0E1577DF44.html",
							"GUID-1CB186D5-ECE4-41BE-BADE-FC0E1577DF44.html",
							"GUID-03312605-BBAE-4465-A49A-8338257CF202.html",
							"GUID-03312605-BBAE-4465-A49A-8338257CF202.html",
							"GUID-03312605-BBAE-4465-A49A-8338257CF202.html",
							"GUID-03312605-BBAE-4465-A49A-8338257CF202.html",
							"GUID-03312605-BBAE-4465-A49A-8338257CF202.html",
							"GUID-A48E118B-6776-4205-A185-1158D6876D4D.html",
							"GUID-A48E118B-6776-4205-A185-1158D6876D4D.html",
							"GUID-A48E118B-6776-4205-A185-1158D6876D4D.html",
							"GUID-A48E118B-6776-4205-A185-1158D6876D4D.html",
							"GUID-A48E118B-6776-4205-A185-1158D6876D4D.html",
							"GUID-E99DC114-8F37-4C2F-A3C3-2FB637EEA751.html",
							"GUID-E99DC114-8F37-4C2F-A3C3-2FB637EEA751.html",
							"GUID-E99DC114-8F37-4C2F-A3C3-2FB637EEA751.html",
							"GUID-E99DC114-8F37-4C2F-A3C3-2FB637EEA751.html",
							"GUID-E99DC114-8F37-4C2F-A3C3-2FB637EEA751.html",
							"GUID-624ED883-90AD-42A6-B408-56CE812D1BF1.html",
							"GUID-624ED883-90AD-42A6-B408-56CE812D1BF1.html",
							"GUID-624ED883-90AD-42A6-B408-56CE812D1BF1.html",
							"GUID-624ED883-90AD-42A6-B408-56CE812D1BF1.html",
							"GUID-624ED883-90AD-42A6-B408-56CE812D1BF1.html",
							"GUID-B3D492FD-EE43-4E34-B7E0-43508DC5B865.html","GUID-CF31B9F8-A031-4CD3-B9D5-AAC7DF934186.html",
							"GUID-CF31B9F8-A031-4CD3-B9D5-AAC7DF934186.html",
							"GUID-CF31B9F8-A031-4CD3-B9D5-AAC7DF934186.html",
							"GUID-CF31B9F8-A031-4CD3-B9D5-AAC7DF934186.html",
							"GUID-CF31B9F8-A031-4CD3-B9D5-AAC7DF934186.html",
							"GUID-B9EBC7BE-F2C8-4492-9B22-48E9015F3B6E.html",
							"GUID-B9EBC7BE-F2C8-4492-9B22-48E9015F3B6E.html",
							"GUID-B9EBC7BE-F2C8-4492-9B22-48E9015F3B6E.html",
							"GUID-B9EBC7BE-F2C8-4492-9B22-48E9015F3B6E.html",
							"GUID-B9EBC7BE-F2C8-4492-9B22-48E9015F3B6E.html",
							"GUID-D08C61D1-8CD6-4D2F-B74D-E58784C9042B.html","GUID-A7B0958C-E476-48EA-9C30-DA83508CC577.html","GUID-183B334C-1BDF-4564-A870-F4C2BE978405.html",
							"GUID-183B334C-1BDF-4564-A870-F4C2BE978405.html",
							"GUID-183B334C-1BDF-4564-A870-F4C2BE978405.html",
							"GUID-D08972F4-21A8-4F0E-8273-03AC48C7F790.html",
							"GUID-D08972F4-21A8-4F0E-8273-03AC48C7F790.html",
							"GUID-D08972F4-21A8-4F0E-8273-03AC48C7F790.html",
							"GUID-7D9AC457-8781-4DAA-BEDB-6CA258BA5C59.html",
							"GUID-7D9AC457-8781-4DAA-BEDB-6CA258BA5C59.html",
							"GUID-7D9AC457-8781-4DAA-BEDB-6CA258BA5C59.html",
							"GUID-4B67B429-8AD1-401B-A4C5-E80B38261F31.html",
							"GUID-4B67B429-8AD1-401B-A4C5-E80B38261F31.html",
							"GUID-4B67B429-8AD1-401B-A4C5-E80B38261F31.html",
							"GUID-C51A10C8-084D-4BF8-A6F0-3EE59657C130.html",
							"GUID-C51A10C8-084D-4BF8-A6F0-3EE59657C130.html",
							"GUID-C51A10C8-084D-4BF8-A6F0-3EE59657C130.html",
							"GUID-D6B3AF6D-9520-47FA-AC15-AE93D53328FC.html",
							"GUID-D6B3AF6D-9520-47FA-AC15-AE93D53328FC.html",
							"GUID-D6B3AF6D-9520-47FA-AC15-AE93D53328FC.html",
							"GUID-C689652B-94C6-440A-90DC-152E945B54A1.html",
							"GUID-C689652B-94C6-440A-90DC-152E945B54A1.html",
							"GUID-C689652B-94C6-440A-90DC-152E945B54A1.html",
							"GUID-0FEC3EB2-1308-4A1C-B574-9559D9EC3D32.html",
							"GUID-0FEC3EB2-1308-4A1C-B574-9559D9EC3D32.html",
							"GUID-0FEC3EB2-1308-4A1C-B574-9559D9EC3D32.html",
							"GUID-C7436175-9555-4084-8CC2-D745C53F113C.html",
							"GUID-C7436175-9555-4084-8CC2-D745C53F113C.html",
							"GUID-C7436175-9555-4084-8CC2-D745C53F113C.html",
							"GUID-259CFA61-09A7-423C-8608-8494531680CC.html",
							"GUID-259CFA61-09A7-423C-8608-8494531680CC.html",
							"GUID-259CFA61-09A7-423C-8608-8494531680CC.html",
							"GUID-60770A63-E7A8-4C18-9B4D-1A78A64FAFC6.html",
							"GUID-60770A63-E7A8-4C18-9B4D-1A78A64FAFC6.html",
							"GUID-60770A63-E7A8-4C18-9B4D-1A78A64FAFC6.html",
							"GUID-133C54E9-8E07-4D8E-BDC4-289780F9AAF2.html",
							"GUID-133C54E9-8E07-4D8E-BDC4-289780F9AAF2.html",
							"GUID-133C54E9-8E07-4D8E-BDC4-289780F9AAF2.html",
							"GUID-E2612D52-C312-4265-8EE8-A9EA4B8DDDC7.html",
							"GUID-E2612D52-C312-4265-8EE8-A9EA4B8DDDC7.html",
							"GUID-E2612D52-C312-4265-8EE8-A9EA4B8DDDC7.html",
							"GUID-B0A065DE-8AA5-45D9-9564-74D2D6B2737A.html",
							"GUID-B0A065DE-8AA5-45D9-9564-74D2D6B2737A.html",
							"GUID-B0A065DE-8AA5-45D9-9564-74D2D6B2737A.html",
							"GUID-2A4A2013-6E0B-4723-ACFA-4F47F89002D0.html",
							"GUID-2A4A2013-6E0B-4723-ACFA-4F47F89002D0.html",
							"GUID-2A4A2013-6E0B-4723-ACFA-4F47F89002D0.html",
							"GUID-2A4A2013-6E0B-4723-ACFA-4F47F89002D0.html",
							"GUID-2A4A2013-6E0B-4723-ACFA-4F47F89002D0.html",
							"GUID-1F2868F0-CA59-47E2-80D0-16DF4E8A01CE.html",
							"GUID-1F2868F0-CA59-47E2-80D0-16DF4E8A01CE.html",
							"GUID-1F2868F0-CA59-47E2-80D0-16DF4E8A01CE.html",
							"GUID-1F2868F0-CA59-47E2-80D0-16DF4E8A01CE.html",
							"GUID-1F2868F0-CA59-47E2-80D0-16DF4E8A01CE.html",
							"GUID-8AADBB19-32FD-4C50-AE4F-482599F9D02F.html",
							"GUID-8AADBB19-32FD-4C50-AE4F-482599F9D02F.html",
							"GUID-8AADBB19-32FD-4C50-AE4F-482599F9D02F.html",
							"GUID-8AADBB19-32FD-4C50-AE4F-482599F9D02F.html",
							"GUID-8AADBB19-32FD-4C50-AE4F-482599F9D02F.html",
							"GUID-F1364A8C-3E96-429B-A880-609E7A704762.html",
							"GUID-F1364A8C-3E96-429B-A880-609E7A704762.html",
							"GUID-F1364A8C-3E96-429B-A880-609E7A704762.html",
							"GUID-F1364A8C-3E96-429B-A880-609E7A704762.html",
							"GUID-F1364A8C-3E96-429B-A880-609E7A704762.html",
							"GUID-C9597087-8DE9-4755-9D6A-C93DF62BD1E1.html",
							"GUID-C9597087-8DE9-4755-9D6A-C93DF62BD1E1.html",
							"GUID-C9597087-8DE9-4755-9D6A-C93DF62BD1E1.html",
							"GUID-C9597087-8DE9-4755-9D6A-C93DF62BD1E1.html",
							"GUID-C9597087-8DE9-4755-9D6A-C93DF62BD1E1.html",
							"GUID-AAC3B8D6-B77A-4883-BE1B-0EA0BE4872BC.html",
							"GUID-AAC3B8D6-B77A-4883-BE1B-0EA0BE4872BC.html",
							"GUID-AAC3B8D6-B77A-4883-BE1B-0EA0BE4872BC.html",
							"GUID-AAC3B8D6-B77A-4883-BE1B-0EA0BE4872BC.html",
							"GUID-AAC3B8D6-B77A-4883-BE1B-0EA0BE4872BC.html",
							"GUID-B1E12C3C-2987-4791-BA2A-54F90EB76C38.html",
							"GUID-B1E12C3C-2987-4791-BA2A-54F90EB76C38.html",
							"GUID-B1E12C3C-2987-4791-BA2A-54F90EB76C38.html",
							"GUID-B1E12C3C-2987-4791-BA2A-54F90EB76C38.html",
							"GUID-B1E12C3C-2987-4791-BA2A-54F90EB76C38.html",
							"GUID-C949561B-9512-4FF1-B590-1A41E6336777.html",
							"GUID-C949561B-9512-4FF1-B590-1A41E6336777.html",
							"GUID-C949561B-9512-4FF1-B590-1A41E6336777.html",
							"GUID-C949561B-9512-4FF1-B590-1A41E6336777.html",
							"GUID-C949561B-9512-4FF1-B590-1A41E6336777.html",
							"GUID-FCE3BB9C-EE95-44A0-AD6B-699B9CF1395B.html",
							"GUID-FCE3BB9C-EE95-44A0-AD6B-699B9CF1395B.html",
							"GUID-FCE3BB9C-EE95-44A0-AD6B-699B9CF1395B.html",
							"GUID-FCE3BB9C-EE95-44A0-AD6B-699B9CF1395B.html",
							"GUID-FCE3BB9C-EE95-44A0-AD6B-699B9CF1395B.html",
							"GUID-6F51DFED-F916-4803-8B8F-0A9286A08226.html",
							"GUID-6F51DFED-F916-4803-8B8F-0A9286A08226.html",
							"GUID-6F51DFED-F916-4803-8B8F-0A9286A08226.html",
							"GUID-6F51DFED-F916-4803-8B8F-0A9286A08226.html",
							"GUID-6F51DFED-F916-4803-8B8F-0A9286A08226.html",
							"GUID-7CAED737-9F28-458E-B9A3-1D20184705F0.html",
							"GUID-7CAED737-9F28-458E-B9A3-1D20184705F0.html",
							"GUID-7CAED737-9F28-458E-B9A3-1D20184705F0.html",
							"GUID-7CAED737-9F28-458E-B9A3-1D20184705F0.html",
							"GUID-7CAED737-9F28-458E-B9A3-1D20184705F0.html",
							"GUID-9FC50B7F-D694-4BE2-94AE-576D308FF56B.html",
							"GUID-9FC50B7F-D694-4BE2-94AE-576D308FF56B.html",
							"GUID-9FC50B7F-D694-4BE2-94AE-576D308FF56B.html",
							"GUID-9FC50B7F-D694-4BE2-94AE-576D308FF56B.html",
							"GUID-9FC50B7F-D694-4BE2-94AE-576D308FF56B.html",
							"GUID-5A8DBB18-071C-4159-87F2-E34ED758FCB1.html",
							"GUID-5A8DBB18-071C-4159-87F2-E34ED758FCB1.html",
							"GUID-5A8DBB18-071C-4159-87F2-E34ED758FCB1.html",
							"GUID-5A8DBB18-071C-4159-87F2-E34ED758FCB1.html",
							"GUID-A04B5B1F-202B-4944-B18F-13E4857CC3CD.html","GUID-4552A2E4-E35C-4FD0-9C01-0EE86D4F6163.html","GUID-079BEEAB-D3FE-415A-8EA6-F8A704302FCB.html","GUID-9B3F465C-7297-4547-B7C6-3AAABEB7E261.html","GUID-D80A0687-7882-4113-8AC1-DE50E569ECB3.html",
							"GUID-D80A0687-7882-4113-8AC1-DE50E569ECB3.html",
							"GUID-D80A0687-7882-4113-8AC1-DE50E569ECB3.html",
							"GUID-40B6BE17-6888-442C-B278-C7315CF29BB6.html",
							"GUID-40B6BE17-6888-442C-B278-C7315CF29BB6.html",
							"GUID-40B6BE17-6888-442C-B278-C7315CF29BB6.html",
							"GUID-4A279764-C14B-42E7-AE63-74FB5385A12A.html",
							"GUID-4A279764-C14B-42E7-AE63-74FB5385A12A.html",
							"GUID-4A279764-C14B-42E7-AE63-74FB5385A12A.html",
							"GUID-0B6BCA96-AD39-49A5-ADEE-70FADE4954CE.html",
							"GUID-0B6BCA96-AD39-49A5-ADEE-70FADE4954CE.html",
							"GUID-0B6BCA96-AD39-49A5-ADEE-70FADE4954CE.html",
							"GUID-42E66214-74F6-4727-BA23-90B47F7A46D1.html",
							"GUID-42E66214-74F6-4727-BA23-90B47F7A46D1.html",
							"GUID-42E66214-74F6-4727-BA23-90B47F7A46D1.html",
							"GUID-6D4995AC-20AC-4C62-BB7A-C15D087FB8B5.html",
							"GUID-6D4995AC-20AC-4C62-BB7A-C15D087FB8B5.html",
							"GUID-6D4995AC-20AC-4C62-BB7A-C15D087FB8B5.html",
							"GUID-2B957012-A09E-4195-AD9B-7816864AE7D4.html",
							"GUID-2B957012-A09E-4195-AD9B-7816864AE7D4.html",
							"GUID-2B957012-A09E-4195-AD9B-7816864AE7D4.html",
							"GUID-C41105AD-522B-4866-AC66-75A20110587A.html",
							"GUID-C41105AD-522B-4866-AC66-75A20110587A.html",
							"GUID-C41105AD-522B-4866-AC66-75A20110587A.html",
							"GUID-2CA9741B-15B1-4C21-8568-66639406EED6.html",
							"GUID-2CA9741B-15B1-4C21-8568-66639406EED6.html",
							"GUID-2CA9741B-15B1-4C21-8568-66639406EED6.html",
							"GUID-8A4CFC3C-660B-4DEA-803D-8B510920C4FA.html",
							"GUID-8A4CFC3C-660B-4DEA-803D-8B510920C4FA.html",
							"GUID-8A4CFC3C-660B-4DEA-803D-8B510920C4FA.html",
							"GUID-93985CDD-F578-4CB7-AE78-E65FC8AFCF1E.html",
							"GUID-93985CDD-F578-4CB7-AE78-E65FC8AFCF1E.html",
							"GUID-93985CDD-F578-4CB7-AE78-E65FC8AFCF1E.html",
							"GUID-05B545E2-37BC-44D7-90A2-033861C5AFB4.html",
							"GUID-05B545E2-37BC-44D7-90A2-033861C5AFB4.html",
							"GUID-05B545E2-37BC-44D7-90A2-033861C5AFB4.html",
							"GUID-D850D1AE-FD20-484E-BAD0-1356CA400E66.html",
							"GUID-D850D1AE-FD20-484E-BAD0-1356CA400E66.html",
							"GUID-D850D1AE-FD20-484E-BAD0-1356CA400E66.html",
							"GUID-AE441BF4-67BB-443B-96F3-7A167FBC89E4.html",
							"GUID-AE441BF4-67BB-443B-96F3-7A167FBC89E4.html",
							"GUID-AE441BF4-67BB-443B-96F3-7A167FBC89E4.html",
							"GUID-181EFEDD-2EC3-47C5-8B34-A5BCB4C94F9B.html",
							"GUID-181EFEDD-2EC3-47C5-8B34-A5BCB4C94F9B.html",
							"GUID-181EFEDD-2EC3-47C5-8B34-A5BCB4C94F9B.html",
							"GUID-313F50D3-16E7-49B1-A249-C4C5E027EB83.html",
							"GUID-313F50D3-16E7-49B1-A249-C4C5E027EB83.html",
							"GUID-313F50D3-16E7-49B1-A249-C4C5E027EB83.html",
							"GUID-AC61FBEF-AB6A-4211-883E-9B8B67E3EF27.html",
							"GUID-AC61FBEF-AB6A-4211-883E-9B8B67E3EF27.html",
							"GUID-AC61FBEF-AB6A-4211-883E-9B8B67E3EF27.html",
							"GUID-F3053C15-A0B6-4DB9-870B-B5953F0CF73D.html",
							"GUID-F3053C15-A0B6-4DB9-870B-B5953F0CF73D.html",
							"GUID-F3053C15-A0B6-4DB9-870B-B5953F0CF73D.html",
							"GUID-7BCE9F7A-D28B-445B-9ED2-D7EA1B1B4B2F.html",
							"GUID-7BCE9F7A-D28B-445B-9ED2-D7EA1B1B4B2F.html",
							"GUID-7BCE9F7A-D28B-445B-9ED2-D7EA1B1B4B2F.html",
							"GUID-FD428666-13E8-4B77-A4DB-5ED53F992A23.html",
							"GUID-FD428666-13E8-4B77-A4DB-5ED53F992A23.html",
							"GUID-FD428666-13E8-4B77-A4DB-5ED53F992A23.html",
							"GUID-34734A12-8C88-4DB1-941A-46CC30B465D7.html",
							"GUID-34734A12-8C88-4DB1-941A-46CC30B465D7.html",
							"GUID-34734A12-8C88-4DB1-941A-46CC30B465D7.html",
							"GUID-2B7BCE9C-B7BB-4D41-995B-8A109D44C68F.html",
							"GUID-2B7BCE9C-B7BB-4D41-995B-8A109D44C68F.html",
							"GUID-2B7BCE9C-B7BB-4D41-995B-8A109D44C68F.html",
							"GUID-99485118-6F10-4B1E-B539-85DCE4019F88.html",
							"GUID-99485118-6F10-4B1E-B539-85DCE4019F88.html",
							"GUID-99485118-6F10-4B1E-B539-85DCE4019F88.html",
							"GUID-2F226F4D-8C80-4A6C-8416-45D070CCB143.html",
							"GUID-2F226F4D-8C80-4A6C-8416-45D070CCB143.html",
							"GUID-2F226F4D-8C80-4A6C-8416-45D070CCB143.html",
							"GUID-2F226F4D-8C80-4A6C-8416-45D070CCB143.html",
							"GUID-2F226F4D-8C80-4A6C-8416-45D070CCB143.html",
							"GUID-36B94A80-5692-4ECF-A2C1-EA0254B835BF.html",
							"GUID-36B94A80-5692-4ECF-A2C1-EA0254B835BF.html",
							"GUID-36B94A80-5692-4ECF-A2C1-EA0254B835BF.html",
							"GUID-36B94A80-5692-4ECF-A2C1-EA0254B835BF.html",
							"GUID-36B94A80-5692-4ECF-A2C1-EA0254B835BF.html",
							"GUID-0251276B-DF3F-47DD-8545-BF927AF7DF37.html",
							"GUID-0251276B-DF3F-47DD-8545-BF927AF7DF37.html",
							"GUID-0251276B-DF3F-47DD-8545-BF927AF7DF37.html",
							"GUID-0251276B-DF3F-47DD-8545-BF927AF7DF37.html",
							"GUID-0251276B-DF3F-47DD-8545-BF927AF7DF37.html",
							"GUID-DD8C4D06-9F06-429F-9591-4CFA63D07E97.html",
							"GUID-DD8C4D06-9F06-429F-9591-4CFA63D07E97.html",
							"GUID-DD8C4D06-9F06-429F-9591-4CFA63D07E97.html",
							"GUID-DD8C4D06-9F06-429F-9591-4CFA63D07E97.html",
							"GUID-DD8C4D06-9F06-429F-9591-4CFA63D07E97.html",
							"GUID-DD8C4D06-9F06-429F-9591-4CFA63D07E97.html",
							"GUID-DD8C4D06-9F06-429F-9591-4CFA63D07E97.html",
							"GUID-DD8C4D06-9F06-429F-9591-4CFA63D07E97.html",
							"GUID-DD8C4D06-9F06-429F-9591-4CFA63D07E97.html",
							"GUID-02FDBC5B-C6C9-43FC-9770-801325FFED37.html",
							"GUID-02FDBC5B-C6C9-43FC-9770-801325FFED37.html",
							"GUID-02FDBC5B-C6C9-43FC-9770-801325FFED37.html",
							"GUID-02FDBC5B-C6C9-43FC-9770-801325FFED37.html",
							"GUID-02FDBC5B-C6C9-43FC-9770-801325FFED37.html",
							"GUID-E19B8456-6CA2-404B-9C0E-0C2C8661E453.html",
							"GUID-E19B8456-6CA2-404B-9C0E-0C2C8661E453.html",
							"GUID-E19B8456-6CA2-404B-9C0E-0C2C8661E453.html",
							"GUID-E19B8456-6CA2-404B-9C0E-0C2C8661E453.html",
							"GUID-E19B8456-6CA2-404B-9C0E-0C2C8661E453.html",
							"GUID-0A7A702E-7C09-4487-AF02-48F8EBB5A1DF.html",
							"GUID-0A7A702E-7C09-4487-AF02-48F8EBB5A1DF.html",
							"GUID-0A7A702E-7C09-4487-AF02-48F8EBB5A1DF.html",
							"GUID-0A7A702E-7C09-4487-AF02-48F8EBB5A1DF.html",
							"GUID-0A7A702E-7C09-4487-AF02-48F8EBB5A1DF.html",
							"GUID-601EC36F-434F-4CEE-BF96-232B23F39458.html","GUID-4D1778DA-A40E-449E-974B-2A194F3B4526.html",
							"GUID-4D1778DA-A40E-449E-974B-2A194F3B4526.html",
							"GUID-4D1778DA-A40E-449E-974B-2A194F3B4526.html",
							"GUID-4D1778DA-A40E-449E-974B-2A194F3B4526.html",
							"GUID-4D1778DA-A40E-449E-974B-2A194F3B4526.html",
							"GUID-BFF159D7-FBC0-4F77-9F6B-4188DC546565.html",
							"GUID-BFF159D7-FBC0-4F77-9F6B-4188DC546565.html",
							"GUID-BFF159D7-FBC0-4F77-9F6B-4188DC546565.html",
							"GUID-BFF159D7-FBC0-4F77-9F6B-4188DC546565.html",
							"GUID-BFF159D7-FBC0-4F77-9F6B-4188DC546565.html",
							"GUID-68EE2145-0277-44A8-9EAD-5DA10C2A1702.html",
							"GUID-68EE2145-0277-44A8-9EAD-5DA10C2A1702.html",
							"GUID-68EE2145-0277-44A8-9EAD-5DA10C2A1702.html",
							"GUID-68EE2145-0277-44A8-9EAD-5DA10C2A1702.html",
							"GUID-68EE2145-0277-44A8-9EAD-5DA10C2A1702.html",
							"GUID-137F1BAC-39B0-4300-8E31-9E072547390A.html",
							"GUID-137F1BAC-39B0-4300-8E31-9E072547390A.html",
							"GUID-137F1BAC-39B0-4300-8E31-9E072547390A.html",
							"GUID-137F1BAC-39B0-4300-8E31-9E072547390A.html",
							"GUID-137F1BAC-39B0-4300-8E31-9E072547390A.html",
							"GUID-1C10D202-0B0E-4646-9A39-E851B3C17C04.html",
							"GUID-1C10D202-0B0E-4646-9A39-E851B3C17C04.html",
							"GUID-1C10D202-0B0E-4646-9A39-E851B3C17C04.html",
							"GUID-1C10D202-0B0E-4646-9A39-E851B3C17C04.html",
							"GUID-1C10D202-0B0E-4646-9A39-E851B3C17C04.html",
							"GUID-4C1ABF34-C433-4B31-9C0E-3640379C4505.html",
							"GUID-4C1ABF34-C433-4B31-9C0E-3640379C4505.html",
							"GUID-F7CAEC8A-C062-4C3C-AC08-D645032D9E8A.html",
							"GUID-F7CAEC8A-C062-4C3C-AC08-D645032D9E8A.html",
							"GUID-F7CAEC8A-C062-4C3C-AC08-D645032D9E8A.html",
							"GUID-F7CAEC8A-C062-4C3C-AC08-D645032D9E8A.html",
							"GUID-F7CAEC8A-C062-4C3C-AC08-D645032D9E8A.html",
							"GUID-F1605631-7DC9-4572-BCA1-85BBD08E6F01.html",
							"GUID-F1605631-7DC9-4572-BCA1-85BBD08E6F01.html",
							"GUID-F1605631-7DC9-4572-BCA1-85BBD08E6F01.html",
							"GUID-F1605631-7DC9-4572-BCA1-85BBD08E6F01.html",
							"GUID-F1605631-7DC9-4572-BCA1-85BBD08E6F01.html",
							"GUID-B25B1045-E18C-4AC4-ABBF-5CB9F6CEBA21.html",
							"GUID-B25B1045-E18C-4AC4-ABBF-5CB9F6CEBA21.html",
							"GUID-B25B1045-E18C-4AC4-ABBF-5CB9F6CEBA21.html",
							"GUID-B25B1045-E18C-4AC4-ABBF-5CB9F6CEBA21.html",
							"GUID-B25B1045-E18C-4AC4-ABBF-5CB9F6CEBA21.html",
							"GUID-E95D4418-FDD2-49A3-999F-6EFBA54DDA3D.html","GUID-0FB3F908-88EE-45CE-94F5-E97AF9049C9B.html","GUID-7551DC67-D79D-4F0C-B56F-7B17E12400E0.html","GUID-CDA512D8-0DE4-4672-8716-04CAC681CB38.html","GUID-F05182E4-B102-4775-A746-1FF37F465312.html","GUID-E8251634-7B15-4073-A103-5A5F128B8699.html","GUID-125F1A93-76CC-4BD7-BACA-01844FBD5F4F.html","GUID-21750586-F9F2-4E33-87FB-8F2994BF4744.html","GUID-07985EED-D525-413B-AEFE-78B563328687.html","GUID-02A694CF-88A5-4ADA-8785-7EEEC62D66EA.html"];

var SearchTitles = ["MPLAB® Harmony PIC32CX-BZ System Services",
"PIC32CX-BZ Device Support Component Library Help",
"Device Support Library Usage",
"RF System",
"wssEnable_t Enum",
"C",
"Description",
"SYS_ClkGen_Config Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_Load_Cal Function",
"C",
"Description",
"Parameters",
"Returns",
"RF_NeedCal Function",
"C",
"Description",
"Parameters",
"Returns",
"RF_Timer_Cal Function",
"C",
"Description",
"Parameters",
"Returns",
"RF_SetIdleMode Function",
"C",
"Description",
"Parameters",
"Returns",
"Temperature_Reading Function",
"C",
"Description",
"Parameters",
"Returns",
"PMU System",
"PMU_Mode_T Enum",
"C",
"Description",
"PMU_Get_Mode Function",
"C",
"Description",
"Parameters",
"Returns",
"PMU_Set_Mode Function",
"C",
"Description",
"Parameters",
"Returns",
"PMU_ConfigCurrentSensor Function",
"C",
"Description",
"Parameters",
"Returns",
"Info Block",
"InformationBlockLoad Function",
"C",
"Description",
"Parameters",
"Returns",
"IB_GetBdAddr Function",
"C",
"Description",
"Parameters",
"Returns",
"IB_GetMACAddr Function",
"C",
"Description",
"Parameters",
"Returns",
"IB_GetAntennaGain Function",
"C",
"Description",
"Parameters",
"Returns",
"IB_GetBatVoltage2v2Sar Function",
"C",
"Description",
"Parameters",
"Returns",
"IB_GetBatVoltage3v0Sar Function",
"C",
"Description",
"Parameters",
"Returns",
"IB_GetRssiOffset Function",
"C",
"Description",
"Parameters",
"Returns",
"Sleep System",
"DEVICE_SLEEP_ConfigAclbClk Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_SLEEP_ConfigRetRam Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_SLEEP_ConfigRfClk Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_SLEEP_ConfigRfMbs Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_SLEEP_ConfigRfXtal Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_SLEEP_ConfigSubSysPllLock Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_SLEEP_ConfigSubSysXtalReady Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_SLEEP_DisableDebugBus Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_DeepSleepWakeSrc_T Enum",
"C",
"Description",
"DEVICE_ClearDeepSleepReg Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_deepSleepIntervalCal Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_EnterDeepSleep Function",
"C",
"Description",
"Parameters",
"Parameters",
"Parameters",
"Returns",
"DEVICE_GetDeepSleepWakeUpSrc Function",
"C",
"Description",
"Parameters",
"Returns",
"DEVICE_SetDeepSleepWakeUpSrc Function",
"C",
"Description",
"Parameters",
"Returns",
"OSAL Extension for FreeRTOS",
"OSAL_QUEUE_Create Function",
"C",
"Description",
"Parameters",
"Returns",
"OSAL_QUEUE_CreateSet Function",
"C",
"Description",
"Parameters",
"Returns",
"OSAL_QUEUE_AddToSet Function",
"C",
"Description",
"Parameters",
"Returns",
"OSAL_QUEUE_SelectFromSet Function",
"C",
"Description",
"Parameters",
"Returns",
"OSAL_QUEUE_Send Function",
"C",
"Description",
"Parameters",
"Returns",
"OSAL_QUEUE_SendISR Function",
"C",
"Description",
"Parameters",
"Returns",
"OSAL_QUEUE_Receive Function",
"C",
"Description",
"Parameters",
"Returns",
"OSAL_QUEUE_IsFullISR Function",
"C",
"Description",
"Parameters",
"Returns",
"App Idle Task",
"app_idle_task Function",
"C",
"Description",
"Parameters",
"Returns",
"app_idle_updateRtcCnt Function",
"C",
"Description",
"Parameters",
"Returns",
"PIC32CX-BZ Persistent Data Server Component Library Help",
"PDS Library Usage",
"ITEM_ID_TO_MEM_MAPPING Macro",
"C",
"Description",
"ITEM_UNDER_SECURITY_CONTROL Macro",
"C",
"Description",
"PDS_DECLARE_ITEM Macro",
"C",
"Description",
"NO_ITEM_FLAGS Macro",
"C",
"Description",
"NO_FILE_MARKS Macro",
"C",
"Description",
"PDS_MAX_FILE_SIZE Macro",
"C",
"Description",
"PDS_DIRECTORY_ID_MASK Macro",
"C",
"Description",
"SIZE_MODIFICATION_ALLOWED Macro",
"C",
"Description",
"PDS_MODULE OFFSET Macro",
"C",
"Description",
"PDS_DataServerState_t Enum",
"C",
"Description",
"ItemIdToMemoryMapping_t Struct",
"C",
"Description",
"PDS_DirDescr_t Struct",
"C",
"Description",
"PDS_Operation_Offset_t Struct",
"C",
"Description",
"PDS_UpdateMemory_t Struct",
"C",
"Description",
"PDS_AddItemExcpetionFromDeleteAll Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_Delete Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_DeleteAll Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_GetItemDescr Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_GetPendingItemsCount Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_Init Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_InitItems Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_IsAbleToRestore Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_RegisterUpdateMemoryCallback Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_RegisterWriteCompleteCallback Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_Restore Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_Store Function",
"C",
"Description",
"Parameters",
"Returns",
"PDS_StoreItemTaskHandler Function",
"C",
"Description",
"Returns",
"PIC32CX-BZ2 Standalone Bootloader Component Help",
"Configuration Options",
"DFU Functionality - Serial image bootloader",
"Bootloader API Usage",
"FW_IMAGE_BLOCK_SIZE Macro",
"C",
"Description",
"FW_IMAGE_EXPECTED_CONT_IDX Macro",
"C",
"Description",
"FW_IMAGE_EXPECTED_PL_LEN Macro",
"C",
"Description",
"HEADER_SIZE Macro",
"C",
"Description",
"IMG_MEM_TOPOLOGY_COUNT Macro",
"C",
"Description",
"MAX_AUTH_KEY_LEN Macro",
"C",
"Description",
"MAX_MEM_TOPOLOGIES Macro",
"C",
"Description",
"MAX_SLOTS Macro",
"C",
"Description",
"METADATA_HEADER_SIZE Macro",
"C",
"Description",
"SLOT_PARAMS Struct",
"C",
"Description",
"SLOT0_BASE_ADDR Macro",
"C",
"Description",
"SLOT0_FIRMWARE Macro",
"C",
"Description",
"SLOT0_HEADER Macro",
"C",
"Description",
"SLOT1_BASE_ADDR Macro",
"C",
"Description",
"SLOT1_FIRMWARE Macro",
"C",
"Description",
"SLOT1_HEADER Macro",
"C",
"Description",
"UNAUTH_FW_SIZE Macro",
"C",
"Description",
"AUTH_STATUS Enum",
"C",
"Description",
"DEVICE_CONTEXT Struct",
"C",
"Description",
"IMG_MEM_INTERFACE Struct",
"C",
"Description",
"IMG_MEM_TOPOLOGY Struct",
"C",
"Description",
"VALID_SLOT Struct",
"C",
"Description",
"FW_IMG_HDR Struct",
"C",
"Description",
"IMG_MEM_AuthenticateHeaderStart Function",
"C",
"Description",
"Parameters",
"Returns",
"IMG_MEM_FindValidTopologies Function",
"C",
"Description",
"Parameters",
"Returns",
"IMG_MEM_SlotSort Function",
"C",
"Description",
"Parameters",
"Returns",
"IMG_MEM_ValidateHeader Function",
"C",
"Description",
"Parameters",
"Returns",
"C",
"Description",
"Parameters",
"Returns",
"IMG_MEM_AuthenticateHeaderStatusGet Function",
"C",
"Description",
"Parameters",
"Returns",
"IMG_MEM_CacheAndValidateHeaders Function",
"C",
"Description",
"Parameters",
"Returns",
"IMG_MEM_CacheHeader Function",
"C",
"Description",
"Parameters",
"Returns",
"DFU API Usage",
"dfu Function",
"C",
"Description",
"Parameters",
"Returns",
"program_exec_main Function",
"C",
"Description",
"Parameters",
"Returns",
"Crc32Init Function",
"C",
"Description",
"Parameters",
"Returns",
"Crc32Add Function",
"C",
"Description",
"Parameters",
"Returns",
"Crc32Result Function",
"C",
"Description",
"Parameters",
"Returns",
"UART_ERROR Enum",
"C",
"UART_Init Function",
"C",
"Description",
"Parameters",
"Returns",
"UART_Read Function",
"C",
"Description",
"Parameters",
"Returns",
"UART_Write Function",
"C",
"Description",
"Parameters",
"Returns",
"PIC32CX-BZ2 Bootloader Services Component Help",
"Microchip Information",
"The Microchip Website",
"Product Change Notification Service",
"Customer Support",
"Microchip Devices Code Protection Feature",
"Legal Notice",
"Trademarks",
"Quality Management System",
"Worldwide Sales and Service"];

var SearchInfo = [" MPLAB® Harmony PIC32CX-BZ System Services The PIC32CX-BZ System services provides several services to protocol developers and application users which use PIC32CX-BZ products It gives common system services like device driver library persistence data server library standalone bootloader and Bootloader services These services are created as components in Harmony 3 Services Provided Service Description Device Support Library This service provides help on the Device Support library that can be used as interface with RF System PMU System Info Block and Sleep System Persistent Data Server Library This service provides help on the PDS library that can be used for storing and restoring of important data in non-volatile memory using wear levelling mechanism Standalone Bootloader This service provides help on the Standalone Bootloader component that can be used to upgrade firmware on a target device without the need for an external programmer or debugger Bootloader Services This service provides help on the OTA Services that can be used to create signed firmware image for OTA with the provided header and OTA header information ",
							" PIC32CX-BZ Device Support Component Library Help The PIC32CX-BZ Device Support Component Library provides software API's for various subsystems in the PIC32CX-BZ  These systems include:  RF System - Helps in initialization calibration and other activities for using RF Sub system  PMU System - Helps in setting various power modes available in the PMU System  Information Block - Helps in getting the factory default values of information like device/MAC address ADC value temperature etc  Sleep System - Helps to enter or exit the sleep modes supported by the system   Additionally device component includes the following two services as sources  OSAL(Operating System Abstraction Layer) Extension for FreeRTOS  Application Idle task service   ",
							" Device Support Library Usage  Configuring the library  There is no configuration for this library  Device Support Libraries groups classification   RF System  PMU System  Information Base  Sleep System   Using the library - An Example  When the device is first powered on the system will be calibrated with its factory settings by calling:  SYS_Load_Cal();  Similarly other API’s can be used Refer API information for more details on its description and usage  ",
							" RF System RF System helps in initialization calibration and other activities for using RF Sub system  The major routines of RF System   Configuring RF system clock that will be fed into the MCU clock  Loading system calibration values for RF system  Helps to check whether the RF needs to be calibrated or not  RF Calibration based on timer event  Reading current temperature ADC value   ",
							" wssEnable_t Enum ",
							" C typedef enum { WSS_ENABLE_NONE //None WSS_ENABLE_BLE // BLE Enable WSS_ENABLE_ZB // Zigbee Enable WSS_ENABLE_BLE_ZB //BLE and Zigbee Enable }wssEnable_t; ",
							" Description Wireless Subsystem Enable Flag ",
							" SYS_ClkGen_Config Function ",
							" C void SYS_ClkGen_Config(void); ",
							" Description This routine will configure the RF system clock that feeds the MCU ",
							" Parameters None ",
							" Returns None ",
							" SYS_Load_Cal Function ",
							" C void SYS_Load_Cal(wssEnable_t wssEnable); ",
							" Description This routine will load the System calibration values for the RF and PMU subsystems The main functions are RF initialization BLE Modem initialization load Calibration data from IB VCO coarse tune (ACLB) and Initialize Arbiter ",
							" Parameters Param Description wssEnable_t wssEnable wireless subsystem enable flag 0: None 1: BLE enable 2: ZB enable 3: BLE enable ZB enable ",
							" Returns None ",
							" RF_NeedCal Function ",
							" C bool RF_NeedCal(void); ",
							" Description This routine will decide if RF need to be calibrated current method is a default 60 sec timer to trigger calibration ",
							" Parameters None ",
							" Returns A boolean value: True means RF need to be calibrated False means RF doesn't need to be calibrated ",
							" RF_Timer_Cal Function ",
							" C void RF_Timer_Cal(wssEnable_t wssEnable); ",
							" Description This routine will calibrate the RF from a Timer event condition The main functions are TX_Power_Compensation and RSSI_ED_Compensation which are compensation over temperature Since temperature may change over time user can choose do RF_Timer_Cal over time ",
							" Parameters Param Description wssEnable_t wssEnable wireless subsystem enable flag 0: None 1: BLE enable 2: ZB enable 3: BLE enable ZB enable ",
							" Returns None ",
							" RF_SetIdleMode Function ",
							" C void RF_SetIdleMode(void); ",
							" Description This routine will the RF subsystem as idle mode ",
							" Parameters None ",
							" Returns None ",
							" Temperature_Reading Function ",
							" C uint16_t Temperature_Reading(void); ",
							" Description This routine will read current temperature ADC value The functionality is provided by RF IP ",
							" Parameters None ",
							" Returns uint16 The ADC value of current temperature ",
							" PMU System The PMU (Power Management Unit) subsystem helps in setting various power modes available in the system  Power Management Unit Subsystem is a complex power controller that requires specific configuration and handling by the software for correct safe operation of the SOC The software routines help in handles the startup and operation of the PMU  ",
							" PMU_Mode_T Enum ",
							" C typedef enum { // Linear mode - This is the default mode when CPU and peripherals are running PMU_MODE_MLDO = 1 // Buck (DC-DC/switching) mode; supports High Power (PWM) - The most efficient mode //when the CPU and peripherals are running In this mode the SoC is powered by the DC-DC converter PMU_MODE_BUCK_PWM // 2 // Buck (DC-DC/switching) mode; supports Low Power (PSK) mode PMU_MODE_BUCK_PSM // 3 } PMU_Mode_T; ",
							" Description Supported PMU Modes ",
							" PMU_Get_Mode Function ",
							" C PMU_Mode_T PMU_Get_Mode(void); ",
							" Description This routine will get the power mode of the system ",
							" Parameters None ",
							" Returns PMU_Mode_T - PMU_MODE_MLDO // 1 PMU_MODE_BUCK_PWM // 2 PMU_MODE_BUCK_PSM // 3 ",
							" PMU_Set_Mode Function ",
							" C uint8_t PMU_Set_Mode(PMU_Mode_T mode); ",
							" Description This routine will set the power mode of the system ",
							" Parameters Param Description PMU_Mode_T PMU_MODE_MLDO // 1 PMU_MODE_BUCK_PWM // 2 PMU_MODE_BUCK_PSM // 3 ",
							" Returns uint8_t 0 is success 1 is fail which means no BDADDR IB ",
							" PMU_ConfigCurrentSensor Function ",
							" C bool PMU_ConfigCurrentSensor(bool enable); ",
							" Description This routine will configure the BUCK current sensor It only can be configured when the power mode is set as PMU_MODE_BUCK_PSM Disable current sensor can improve the current consumption of sleep mode ",
							" Parameters Param Description bool enable Enable/Disable BUCK current sensor false: Disable true : Enable ",
							" Returns bool - true is success false is fail due to power mode is not in PMU_MODE_BUCK_PSM ",
							" Info Block Information block helps in getting factory set values from the information base  Information block helps in  loading all settings from the Info Block into the appropriate sub-systems for proper chip operation  getting the Bluetooth Device Address  getting the Zigbee MAC Address  getting factory temperature ADC value  getting Battery voltage 3 0 V ADC value  getting Battery voltage 2 2 V ADC value  getting RSSI compensation offset value  getting antenna gain value   ",
							" InformationBlockLoad Function ",
							" C uint8_t InformationBlockLoad(uint8_t checkIb uint8_t * checkIbExist wssEnable_t wssEnable); ",
							" Description This routine will load all settings from the Info Block into the appropriate sub-systems for proper chip operation NOTE: This is done automatically by RF_SYS_Initialize(uint8_t wssEnable) ",
							" Parameters None ",
							" Returns uint8_t 0 is success 1 is fail ",
							" IB_GetBdAddr Function ",
							" C bool IB_GetBdAddr(uint8_t * p_bdAddr); ",
							" Description This routine will get Bluetooth Device Address from IB If there exists BDADDR IB then it will return the BDADDR stored in IB Otherwise it returns FAILS (1) ",
							" Parameters Param Description uint8_t \"p_Addr\" the pointer to the memory stores BDADDR ",
							" Returns A boolean value True means valid BDADDR IB ",
							" IB_GetMACAddr Function ",
							" C bool IB_GetMACAddr(uint8_t * p_addr); ",
							" Description This routine will get ZB MAC Address from IB If there exists MAC_ADDR IB then it will return the MAC_ADDR stored in IB Otherwise it returns FAILS (1)) ",
							" Parameters Param Description uint8_t \"p_Addr\" the pointer to the memory stores MAC_ADDR ",
							" Returns A boolean value True means valid ZB MAC Address IB ",
							" IB_GetAntennaGain Function ",
							" C bool IB_GetAntennaGain(int8_t * p_antennaGain); ",
							" Description This routine will get antenna gain value from IB The value can be used to calculate radiative power radiative power = conductive power + antenna gain ",
							" Parameters Param Description int8_t p_antennaGain the memory to store antenna gain value ",
							" Returns A boolean value True means vaild antenna gain IB ",
							" IB_GetBatVoltage2v2Sar Function ",
							" C bool IB_GetBatVoltage2v2Sar(int16_t * p_batVoltageSar); ",
							" Description This routine will get Battery voltage 2 2 V ADC value from IB The value can be used for Battery voltage slope and detect battery voltage ",
							" Parameters IB_BatteryCalSar_T p_batVoltageSar - the pointer to the memory stores Battery voltage ADC value ",
							" Returns A boolean value True means valid Battery voltage ADC IB ",
							" IB_GetBatVoltage3v0Sar Function ",
							" C bool IB_GetBatVoltage3v0Sar(int16_t * p_batVoltageSar); ",
							" Description This routine will get Battery voltage 3 0 V ADC value from IB The value can be used for Battery voltage slope and detect battery voltage ",
							" Parameters IB_BatteryCalSar_T p_batVoltageSar - the pointer to the memory stores Battery voltage ADC value ",
							" Returns A boolean value True means valid Battery voltage ADC IB ",
							" IB_GetRssiOffset Function ",
							" C bool IB_GetRssiOffset(int8_t * p_rssiOffset); ",
							" Description This routine will get RSSI compensation offset value from IB The value can be used to compensation RSSI detection ",
							" Parameters Param Description int8_t p_rssiOffset the memory to store RSSI compensation offset value ",
							" Returns A boolean value True means vaild RSSI compensation offset IB ",
							" Sleep System Sleep system helps to enter and exit sleep modes  Two routines are defined  Device Enter Sleep Mode routine  Device Exit Sleep Mode routine   ",
							" DEVICE_SLEEP_ConfigAclbClk Function ",
							" C void DEVICE_SLEEP_ConfigAclbClk(bool enable); ",
							" Description The API is used to enable/disable ACLB clock ",
							" Parameters bool enable Set as true to enable ACLB; set as false to disable ",
							" Returns None ",
							" DEVICE_SLEEP_ConfigRetRam Function ",
							" C void DEVICE_SLEEP_ConfigRetRam(bool enable); ",
							" Description The API is used to enable/disable retention RAM ",
							" Parameters bool enable Set as true to enable retention RAM; set as false to disable ",
							" Returns None ",
							" DEVICE_SLEEP_ConfigRfClk Function ",
							" C void DEVICE_SLEEP_ConfigRfClk(bool enable); ",
							" Description The API is used to enable/disable RF clock ",
							" Parameters bool enable Set as true to enable RF clock; set as false to disable ",
							" Returns None ",
							" DEVICE_SLEEP_ConfigRfMbs Function ",
							" C void DEVICE_SLEEP_ConfigRfMbs(bool enable); ",
							" Description The API is used to enable/disable RF MBS ",
							" Parameters bool enable Set as true to enable RF MBS; set as false to disable ",
							" Returns None ",
							" DEVICE_SLEEP_ConfigRfXtal Function ",
							" C void DEVICE_SLEEP_ConfigRfXtal(bool enable); ",
							" Description The API is used to enable/disable RF crystal ",
							" Parameters bool enable Set as true to enable RF crystal; set as false to disable ",
							" Returns None ",
							" DEVICE_SLEEP_ConfigSubSysPllLock Function ",
							" C void DEVICE_SLEEP_ConfigSubSysPllLock(bool enable); ",
							" Description The API is used to enable/disable BT/ZB sub-system bypass PLL lock ",
							" Parameters bool enable Set as true to enable BT/ZB sub-system bypass PLL lock; set as false to disable ",
							" Returns None ",
							" DEVICE_SLEEP_ConfigSubSysXtalReady Function ",
							" C void DEVICE_SLEEP_ConfigSubSysXtalReady(bool enable); ",
							" Description The API is used to enable/disable BT/ZB sub-system crystal ",
							" Parameters bool enable Set as true to enable BT/ZB sub-system crystal; set as false to disable ",
							" Returns None ",
							" DEVICE_SLEEP_DisableDebugBus Function ",
							" C void DEVICE_SLEEP_DisableDebugBus(void); ",
							" Description The API is used to disable debug bus for power saving purpose ",
							" Parameters None ",
							" Returns None ",
							" DEVICE_DeepSleepWakeSrc_T Enum ",
							" C typedef enum DEVICE_DeepSleepWakeSrc_T { DEVICE_DEEP_SLEEP_WAKE_NONE // The device is not waken from deep sleep DEVICE_DEEP_SLEEP_WAKE_INT0 // The device is waken from deep sleep by interrupt 0 DEVICE_DEEP_SLEEP_WAKE_RTC // The device is waken from deep sleep by RTC DEVICE_DEEP_SLEEP_WAKE_DSWDT // The device is waken from deep sleep by Deep Sleep Watch Dog Timeout DEVICE_DEEP_SLEEP_WAKE_OTHER // The device is waken from deep sleep by the other reason DEVICE_DEEP_SLEEP_WAKE_END } DEVICE_DeepSleepWakeSrc_T; ",
							" Description Various available deep Sleep Wakeup Sources ",
							" DEVICE_ClearDeepSleepReg Function ",
							" C bool DEVICE_ClearDeepSleepReg(void); ",
							" Description The API is used to clear the deep sleep related register If the device is waken from deep sleep mode the related register will be cleared If it's a normal Power-on Reset no register will be cleared ",
							" Parameters None ",
							" Returns A boolean value True means the device is waken from deep sleep mode ",
							" DEVICE_deepSleepIntervalCal Function ",
							" C uint32_t DEVICE_deepSleepIntervalCal(uint32_t expectedInt); ",
							" Description The API is used to perform the deep sleep interval calibration to exclude the HW preparation time of advertising ",
							" Parameters Param Description expectedInt The expected deep sleep interval ",
							" Returns The deep sleep interval after calibration ",
							" DEVICE_EnterDeepSleep Function ",
							" C void DEVICE_EnterDeepSleep(bool enableRetRam uint32_t interval); ",
							" Description The API is used to enter deep sleep mode ",
							" Parameters Param Description enableRetRam Enable/Disable retention ram ",
							" Parameters Param Description interval The interval of deep sleep mode (unit: ms) Set as 0 will keep the device in the deep sleep mode until the INT0 (PB4) is triggered ",
							" Parameters None ",
							" Returns None ",
							" DEVICE_GetDeepSleepWakeUpSrc Function ",
							" C void DEVICE_GetDeepSleepWakeUpSrc(DEVICE_DeepSleepWakeSrc_T *wakeUpSrc); ",
							" Description The API is used to get the wake up source of deep sleep mode ",
							" Parameters Param Description wakeUpSrc Pointer to the wake up source See @ref DEVICE_DeepSleepWakeSrc_T ",
							" Returns None ",
							" DEVICE_SetDeepSleepWakeUpSrc Function ",
							" C void DEVICE_SetDeepSleepWakeUpSrc(DEVICE_DeepSleepWakeSrc_T wakeUpSrc); ",
							" Description The API is used to set the wake up source of deep sleep mode ",
							" Parameters Param Description wakeUpSrc Tthe wake up source See @ref DEVICE_DeepSleepWakeSrc_T ",
							" Returns None ",
							" OSAL Extension for FreeRTOS  OSAL (Operating System Abstraction Layer) Extension for FreeRTOS provide extension for OSAL mappings for the FreeRTOS Real-time operating system The following table defines OSAL routines        Fuction Name  Short Description      OSAL_QUEUE_Create  Creates a new queue instance    OSAL_QUEUE_CreateSet  Creates a new queue set instance    OSAL_QUEUE_AddToSet  Adds the queues and semaphores to the set    OSAL_QUEUE_SelectFromSet  Block to wait for something to be available from the queues or semaphore that have been added to the set    OSAL_QUEUE_Send  Post an item into an OSAL Queue    OSAL_QUEUE_SendISR  Post an item into an OSAL Queue from ISR    OSAL_QUEUE_Receive  Receive an item from an OSAL Queue    OSAL_QUEUE_IsFullISR  Query if an OSAL Queue is full       ",
							" OSAL_QUEUE_Create Function ",
							" C OSAL_RESULT OSAL_QUEUE_Create(OSAL_QUEUE_HANDLE_TYPE *queID uint32_t queueLength uint32_t itemSize); ",
							" Description Creates a new queue instance and returns a handle by which the new queue can be referenced ",
							" Parameters Param Description queID A pointer to the queue ID queueLength The maximum number of items that the queue can contain itemSize The number of bytes each item in the queue will require Items are queued by copy not by reference so this is the number of bytes that will be copied for each posted item Each item in the queue must be the same size ",
							" Returns OSAL_RESULT_TRUE - A queue had been created OSAL_RESULT_FALSE - Queue creation failed ",
							" OSAL_QUEUE_CreateSet Function ",
							" C OSAL_RESULT OSAL_QUEUE_CreateSet(OSAL_QUEUE_SET_HANDLE_TYPE *queID uint32_t queueLength); ",
							" Description Creates a new queue set instance and returns a handle by which the new queue can be referenced ",
							" Parameters Param Description queID A pointer to the queue ID queueLength The maximum number of items that the queue can contain ",
							" Returns OSAL_RESULT_TRUE - A queue set had been created OSAL_RESULT_FALSE - Queue creation failed ",
							" OSAL_QUEUE_AddToSet Function ",
							" C OSAL_RESULT OSAL_QUEUE_AddToSet(OSAL_QUEUE_SET_MEMBER_HANDLE_TYPE *queSetMember OSAL_QUEUE_SET_HANDLE_TYPE *queSetID); ",
							" Description Add the queues and semaphores to the set Reading from these queues and semaphore can only be performed after a call to xQueueSelectFromSet() has returned the queue or semaphore handle from this point on ",
							" Parameters Param Description queSetMember Member queue or semaphore to be added in the set queSetID A pointer to the queue ID ",
							" Returns OSAL_RESULT_TRUE - A queue had been created OSAL_RESULT_FALSE - Queue creation failed ",
							" OSAL_QUEUE_SelectFromSet Function ",
							" C OSAL_RESULT OSAL_QUEUE_SelectFromSet(OSAL_QUEUE_SET_MEMBER_HANDLE_TYPE *queSetMember OSAL_QUEUE_SET_HANDLE_TYPE *queSetID uint16_t waitMS); ",
							" Description Block to wait for something to be available from the queues or semaphore that have been added to the set ",
							" Parameters Param Description queSetMember Member queue or semaphore to be added in the set queSetID A pointer to the queue ID waitMS wait time in milliseconds other value OSAL_WAIT_FOREVER ",
							" Returns OSAL_RESULT_TRUE - A queue had been created OSAL_RESULT_FALSE - Queue creation failed ",
							" OSAL_QUEUE_Send Function ",
							" C OSAL_RESULT OSAL_QUEUE_Send(OSAL_QUEUE_HANDLE_TYPE *queID void *itemToQueue uint16_t waitMS); ",
							" Description Post an item into an OSAL Queue The item is queued by copy not by reference This function must not be called from an interrupt service routine See OSAL_QUEUE_SendISR() for an alternative which may be used in an ISR ",
							" Parameters Param Description queID A pointer to the queue ID itemToQueue A pointer to the item that is to be placed on the queue The size of the items the queue will hold was defined when the queue was created so this many bytes will be copied from itemToQueue into the queue storage area waitMS Time limit to wait in milliseconds 0 do not wait OSAL_WAIT_FOREVER return only when semaphore is obtained Other values timeout delay ",
							" Returns OSAL_RESULT_TRUE - Item copied to the queue OSAL_RESULT_FALSE - Item not copied to the queue or timeout occurred ",
							" OSAL_QUEUE_SendISR Function ",
							" C OSAL_RESULT OSAL_QUEUE_SendISR(OSAL_QUEUE_HANDLE_TYPE *queID void *itemToQueue); ",
							" Description Post an item into an OSAL Queue The item is queued by copy not by reference The highest priority task currently blocked on the queue will be released and made ready to run This form of the send function should be used witin an ISR ",
							" Parameters Param Description queID A pointer to the queue ID itemToQueue A pointer to the item that is to be placed on the queue The size of the items the queue will hold was defined when the queue was created so this many bytes will be copied from itemToQueue into the queue storage area waitMS Time limit to wait in milliseconds 0 do not wait OSAL_WAIT_FOREVER return only when semaphore is obtained Other values timeout delay ",
							" Returns OSAL_RESULT_TRUE - Item copied to the queue OSAL_RESULT_FALSE - Item not copied to the queue or timeout occurred ",
							" OSAL_QUEUE_Receive Function ",
							" C OSAL_RESULT OSAL_QUEUE_Receive(OSAL_QUEUE_HANDLE_TYPE *queID void *pBuffer uint16_t waitMS); ",
							" Description Receive an item from an OSAL Queue The item is received by copy so a buffer of adequate size must be provided The number of bytes copied into the buffer was defined when the queue was created Successfully received items are removed from the queue This function must not be used in an interrupt service routine ",
							" Parameters Param Description queID A pointer to the queue ID buffer A pointer to the buffer into which the received item will be copied The size of the items the queue hold was defined when the queue was created so this many bytes will be copied from the queue storage area into the buffer waitMS Time limit to wait in milliseconds 0 do not wait OSAL_WAIT_FOREVER return only when semaphore is obtained Other values timeout delay ",
							" Returns OSAL_RESULT_TRUE - An item was successfully received from the queue OSAL_RESULT_FALSE - An item was not successfully received from the queue or timeout occurred ",
							" OSAL_QUEUE_IsFullISR Function ",
							" C OSAL_RESULT OSAL_QUEUE_IsFullISR(OSAL_QUEUE_HANDLE_TYPE *queID); ",
							" Description Query if an OSAL Queue is full These function should be used only from witin an ISR or within a critical section ",
							" Parameters Param Description queID A pointer to the queue ID ",
							" Returns OSAL_RESULT_TRUE - The queue is Full OSAL_RESULT_FALSE - The queue is not Full ",
							" App Idle Task  App Idle task service provides idle task routines which will be called from FreeRTOS Idle hook function It executes the idle activities The following activities may be carried out  RF Calibration if RF needs calibration  Storing of PDS Items by calling PDS Store Item Handler  Checking whether the Zigbee stack is ready to sleep  Requesting BLE to enter sleep mode     ",
							" app_idle_task Function ",
							" C void app_idle_task( void ); ",
							" Description This function performs the activities like PDS store Sleep and other RF system idle activities which can be performed when the complete system is idle ",
							" Parameters None ",
							" Returns None ",
							" app_idle_updateRtcCnt Function ",
							" C void app_idle_updateRtcCnt(uint32_t cnt); ",
							" Description RTC based tickless idle mode Hook function records RTC counter value in each tick interrupt to ensure the real time RTC counter value be recorded during system is active Then RTC tickless idle mode can use this value to calculate how much time passed during system sleep ",
							" Parameters Param Description cnt RTC counter value ",
							" Returns None ",
							" PIC32CX-BZ Persistent Data Server Component Library Help The PIC32CX-BZ Persistent Data Server Component Library provides interface for storing and restoring items into the Non volatile memory using wear leveling mechanism  PERSISTENT DATA SERVER (PDS)  The Persistent Data Server (PDS) component implements interfaces and functionality for storing and restoring data in a non-volatile (NV) memory storage  In PDS particular pieces of persistent data are called files and groups of parameters are called directories Following section describes how to define such persistent items and overview of PDS API functions that can be used to store and restore them  User can specify parameters he(she) wants to backup in a non-volatile memory and restore in case of power failure This service is provided by Persistent Data Server (PDS) module The BitCloud (TM) stack also uses the same service for its internal structures  The main feature behind the wear leveling PDS is the mechanism designed to extend the lifetime of the NV storage as well as to protect data from being lost when a reset occurs during writing to the NV This mechanism is based on writing data evenly through the dedicated area so that the storage’s lifetime in not limited by the number of reading and writing operations performed with more frequently used parameters For this purpose the non-volatile storage organized as a cyclic log with new versions of data being written at the end of the log not in place where the previous versions of the same data are stored  ",
							" PDS Library Usage PIC32CX-BZ2 Persistent Data Server(PDS) Library Usage  Configuring the library  There is no configuration of this library  Using the library  Defining Files and Directories  In PDS particular pieces of persistent data are called files (or items) and groups of files are called directories Note that directories are just the way to refer to particular files and a file can belong to several directories at once Files and directories contain the meta-information about the data that allows its maintenance within the NV – file descriptors and directory descriptors  The PDS component defines a number of file units for individual stack parameters and directories to group files for more subtle control The application may define its own items  File and File Descriptor  Each item which user wants to backup in a non-volatile memory and restore in case of power failure is treated as a FILE - actual item value with associated service information FILE DESCRIPTOR Each file could be accessed by it's ID a unique 16-bit value associated with a file File descriptor keeps information about item's size and it's displacement in RAM and inside the NV storage  All file descriptors should be placed in a special segment inside the MCU Flash memory - [PDS_FF] The PDS_FILE_DESCR() macro is used to initialize descriptor and PDS_DECLARE_FILE() macro is used to place descriptor to required segment  A file descriptor consists of the following parts:    memoryId: memory identifier associated with a file  size: the size of file’s data  ramAddr: the pointer to item’s entity in RAM (that is to a variable holding file’s data) if one exists or NULL otherwise  fileMarks: file marks specifying specific characteristics of the file File marks may be set either to following values:  SIZE_MODIFICATION_ALLOWED: indicates that size of the file can be different in new firmware image after over-the-air upgrade Usually is set for files storing table data such as binding table group table and others  ITEM_UNDER_SECURITY_CONTROL: no impact works same as NO_FILE_MARKS  NO_FILE_MARKS: no special characteristics for the file     A file descriptor tied to some data in RAM is defined by using the PDS_DECLARE_FILE macro in the code that may be used by both the stack and the application:   PDS_DECLARE_FILE(memoryId size ramAddr fileMarks)   Directory and Directory Descriptor  PDS is able to operate with separate files or with file lists - DIRECTORIES Directory nesting is allowed Each directory should be provided with DIRECTORY DESCRIPTOR which keeps information about associated items Directories could be accessed by 16-bit ID different from already associated with files  All directory descriptors should be placed in a special segment inside the MCU Flash memory - [PDS_FD] The PDS_DECLARE_DIR() macro is used to place a directory to required segment  Directory descriptors are special entities describing a group of file A directory descriptor is defined in the code (the stack’s or the application’s one) and is placed to the separate flash memory segment  The directory descriptor consists of the following parts:  list: pointer to the list of files IDs associated with the directory This list should be placed in the flash memory (by the use of the PROGMEM_DECLARE macro – see an example below)  filesCount: the amount of files associated with the directory  memoryId: memory identifier associated with the directory   A directory is declared via the PDS_DECLARE_DIR macro in the following way:   PDS_DECLARE_DIR(const PDS_DirDescr_t csGeneralParamsDirDescr) = { list = CsGeneralMemoryIdsTable filesCount = ARRAY_SIZE(CsGeneralMemoryIdsTable) memoryId = BC_GENERAL_PARAMS_MEM_ID }; //Where CsGeneralMemoryIdsTable is the list of objects defined in the following way: PROGMEM_DECLARE(const PDS_MemId_t CsGeneralMemoryIdsTable[]) = { CS_UID_MEM_ID CS_RF_TX_POWER_MEM_ID //other parameters in this list }      Major Functions       Name  Description      PDS_Init  initializes the Persistence Data Server    PDS_InitItems  initializes the Persistence Data Server Items    PDS_Restore  Restores data from non-volatile storage    PDS_Store  Stores data in non-volatile memory in background not blocking other processes    PDS_DeleteAll  deletes data from non-volatile storage    PDS_AddItemExcpetionFromDeleteAll  extempts the item from the Delete All command    PDS_Delete  removes specified file records from NV Storage    PDS_IsAbleToRestore  Checks if the specified PDS file or directory can be restored from non-volatile memory    PDS_RegisterWriteCompleteCallback  registers the callback for the Item Write completion    PDS_RegisterUpdateMemoryCallback  registers the callback for the Item update memory    PDS_StoreItemTaskHandler  task that handles the store items into NV memory    PDS_GetPendingItemsCount  gets the number of items pending in the PDS write queue    PDS_GetItemDescr  gets the item descriptor for the given item ID       ",
							" ITEM_ID_TO_MEM_MAPPING Macro ",
							" C /** PDS Item to memory mapping Definition */ #define ITEM_ID_TO_MEM_MAPPING(item size pointer func flag) { itemId = item itemSize = size itemData = pointer filler = func flags = flag} ",
							" Description PDS Item to memory mapping Definition ",
							" ITEM_UNDER_SECURITY_CONTROL Macro ",
							" C #define ITEM_UNDER_SECURITY_CONTROL 0x02U ",
							" Description PDS Item under security control Flag ",
							" PDS_DECLARE_ITEM Macro ",
							" C #define PDS_DECLARE_ITEM(item size pointer func flag) PDS_FF_OBJECT(ItemIdToMemoryMapping_t pds_ff_##item) = ITEM_ID_TO_MEM_MAPPING(item size pointer func flag); ",
							" Description PDS Declare Item Definition To declare an itemfile in the PDS item : Item ID (Unique Indentifier number)for that particular ItemFile size: size of the item (Maximum allowed size for an Item is 2K (2048 Bytes) pointer: RAM address of the Item func: filler function can be set to NULL (will be called during the store operation) Shall be kept to min size flag: NO_ITEM_FLAGS SIZE_MODIFICATION_ALLOWED ITEM_UNDER_SECURITY_CONTROL ",
							" NO_ITEM_FLAGS Macro ",
							" C #define NO_ITEM_FLAGS 0x00U ",
							" Description PDS Item No Item Flags ",
							" NO_FILE_MARKS Macro ",
							" C #define NO_FILE_MARKS 0U ",
							" Description No File Marks ",
							" PDS_MAX_FILE_SIZE Macro ",
							" C #define PDS_MAX_FILE_SIZE (2 * 1024) //bytes ",
							" Description Ensure that the max size of the item is less than or equal to PDS_MAX_FILE_SIZE ",
							" PDS_DIRECTORY_ID_MASK Macro ",
							" C #define PDS_DIRECTORY_ID_MASK 0x0C00U // (Bit 11 and Bit 10) ",
							" Description Use this Directory mask on declaring directory item id's along with module specific offsets ",
							" SIZE_MODIFICATION_ALLOWED Macro ",
							" C #define SIZE_MODIFICATION_ALLOWED 0x01U ",
							" Description PDS Item Size Modificaiton Allowed Flag ",
							" PDS_MODULE OFFSET Macro ",
							" C #define PDS_MODULE_APP_OFFSET (1 12) #define PDS_MODULE_BT_OFFSET (1 13) #define PDS_MODULE_ZB_OFFSET (1 14) #define PDS_MODULE_RES_OFFSET (1 15) ",
							" Description These offsets CAN be used(OR'ed) to define the range and also to differentiate the module specific IDs so the same item ID will not be used across the stacksmodules The IDs ranges are required to maintain the backward compatibility during an SW upgrade with newly added item(s) in any module Note: These offset were not used anywhere inside PDS implementation(Library) This is purely to enable the application to use specific IDs across modules ",
							" PDS_DataServerState_t Enum ",
							" C typedef enum { PDS_SUCCESS // Command completed successfully } PDS_DataServerState_t; ",
							" Description PDS Data Server State Enumeration ",
							" ItemIdToMemoryMapping_t Struct ",
							" C typedef struct { // Item identifier PDS_MemId_t itemId; // Size of the item uint16_t itemSize; // Pointer to the item data void *itemData; // Function which gets called upon operation completion void (*filler)(void); // Flags uint8_t flags; } ItemIdToMemoryMapping_t; ",
							" Description PDS Item to memory mapping structure ",
							" PDS_DirDescr_t Struct ",
							" C typedef struct { // PDS Memory identifier record list PDS_MemIdRec_t list; // Number of files in the directory uint16_t filesCount; // Memory identifier PDS_MemId_t memoryId; } PDS_DirDescr_t; ",
							" Description PDS Directory Descriptor structure ",
							" PDS_Operation_Offset_t Struct ",
							" C typedef struct { // Item identifier PDS_MemId_t id; // Item offset uint16_t offset; // size of item uint16_t size; // corresponding ram address for the item uint8_t *ramAddr; }PDS_Operation_Offset_t; ",
							" Description PDS Operation offset structure ",
							" PDS_UpdateMemory_t Struct ",
							" C typedef struct { // Item identifier PDS_MemId_t id; // Data pointer void *data; // current item size uint16_t size; // last size of item uint16_t oldSize; }PDS_UpdateMemory_t; ",
							" Description PDS Update Memory structure ",
							" PDS_AddItemExcpetionFromDeleteAll Function ",
							" C bool PDS_AddItemExcpetionFromDeleteAll (PDS_MemId_t itemID); ",
							" Description This routine extempts the item from the Delete All command Makes the item double persistent ",
							" Parameters Param Description PDS_MemId_t Item ID to be exempted ",
							" Returns bool - True ",
							" PDS_Delete Function ",
							" C PDS_DataServerState_t PDS_Delete(PDS_MemId_t memoryId); ",
							" Description This routine removes specified file records from NV Storage ",
							" Parameters Param Description memoryId an identifier of PDS file or directory to be removed from NV memory ",
							" Returns PDS state as an operation result ",
							" PDS_DeleteAll Function ",
							" C PDS_DataServerState_t PDS_DeleteAll(bool includingPersistentItems); ",
							" Description This routine deletes data from non-volatile storage except the Persistent items depending on the parameter passed ",
							" Parameters Param Description includingPersistentItems deletes Persistent items if TRUE deletes all other items except Persistent items if FALSE ",
							" Returns PDS_DataServerState_t - status of PDS DeleteAll ",
							" PDS_GetItemDescr Function ",
							" C bool PDS_GetItemDescr(PDS_MemId_t memoryId ",
							" Description This routine gets the item descriptor for the given item ID ",
							" Parameters Param Description memoryId item id itemDescrToGet pointer to item descriptor to be loaded ",
							" Returns true if descriptor is found out for the given item ID false - otherwise ",
							" PDS_GetPendingItemsCount Function ",
							" C uint8_t PDS_GetPendingItemsCount (void); ",
							" Description This routine returns no of items pending in the PDS write queue ",
							" Parameters None ",
							" Returns uint8_t value No of items waiting in the queue zero if no items are pending ",
							" PDS_Init Function ",
							" C void PDS_Init(PDS_MemId_t maxItems PDS_MemId_t maxDirectories); ",
							" Description This routine initializes Persistent Data Server ",
							" Parameters Param Description maxItems Total number of individual PDS items used in the entire system maxDirectories Total number of PDS directories used in the entire system ",
							" Returns None ",
							" PDS_InitItems Function ",
							" C void PDS_InitItems(uint16_t memIdStart uint16_t memIdEnd); ",
							" Description This routine initializes PDS items Initializes an item with default data if it doesn't exist yet or reads it when it does exist ",
							" Parameters Param Description memIdStart The start memory identifier memIdEnd The end memory identifier ",
							" Returns true if all expected files have been restored false - otherwise ",
							" PDS_IsAbleToRestore Function ",
							" C bool PDS_IsAbleToRestore(PDS_MemId_t memoryId); ",
							" Description This routine checks if the specified PDS file or directory can be restored from non-volatile memory ",
							" Parameters Param Description memoryId an identifier of PDS file or directory to be checked ",
							" Returns true if the specified memory can be restored; false - otherwise ",
							" PDS_RegisterUpdateMemoryCallback Function ",
							" C void PDS_RegisterUpdateMemoryCallback (bool (*callbackFn)(PDS_UpdateMemory_t *)); ",
							" Description This routine register the callback for the Item update memory Updates BC parameters after restoring taking into account possible size ",
							" Parameters Param Description PDS_UpdateMemory_t PDS_UpdateMemory_t callbackFn pointer to callback functions ",
							" Returns None ",
							" PDS_RegisterWriteCompleteCallback Function ",
							" C void PDS_RegisterWriteCompleteCallback (void (*callbackFn)(PDS_MemId_t)); ",
							" Description This routine registers the callback for the Item Write completion ",
							" Parameters Param Description callbackFn callback which gets called after write complete ",
							" Returns None ",
							" PDS_Restore Function ",
							" C bool PDS_Restore(PDS_MemId_t memoryId); ",
							" Description This routine restores data from non-volatile storage PDS files not included in the current build configuration will be ignored Restoring process will be performed only if all files expected for actual configuration are presented in NV storage ",
							" Parameters Param Description memoryId an identifier of PDS file or directory to be restored from non-volatile memory ",
							" Returns true if all expected files have been restored false - otherwise ",
							" PDS_Store Function ",
							" C bool PDS_Store(PDS_MemId_t memoryId); ",
							" Description This routine stores data in non-volatile memory in background not blocking other processes Make sure the item/file size is less than MAX_FILE_SIZE ",
							" Parameters Param Description memoryId an identifier of PDS file or directory to be stored from non-volatile memory ",
							" Returns True if storing process has begun false - otherwise ",
							" PDS_StoreItemTaskHandler Function ",
							" C void PDS_StoreItemTaskHandler(void); ",
							" Description This routine is the PDS store item handler Actual flash write operation of a particular Item ID Can be called when system is Idle or when necessary ",
							" Returns None ",
							" PIC32CX-BZ2 Standalone Bootloader Component Help  PIC32CX-BZ2 bootloader is a standalone harmony component Using it one can generate bootloader which is a program that is loaded on internal flash memory and gets executed every time the device powers up or resets  Bootloader can be used to upgrade firmware on a target device without the need for an external programmer or debugger It does not fully operate on the device but can perform various functions prior to starting the main application  Functionality of Bootloader  Loads firmware images to flash over the serial connection using a tool or python script known as Device Firmware Upgrade (DFU)  Provides application protection for firmware  Replaces application firmware  Starts the application  If the device wakes from deep sleep then bootloader directly jumps to the application    Memory Information and Layout of PIC32CXBZ2 device           Memory Area  Purpose      Boot Flash Size is 0x0 to 0x5E00 – (~24KB)  The memory where bootloader code runs    Slot 0 base address - 0x01000000  The memory where the application firmware runs and the memory where the bootloader copies the new application firmware    Slot 1 base address - 0x01080000  The memory where the received image(Either through DFU or any other way) gets stored and the memory where bootloader looks for the new image to copy into the Slot 0       The full memory layout can be found here    Boot Flash  In PIC32CXBZ2 24KB boot flash memory is separated from the main execution memory This boot flash is used for bootloader code  Metadata Header  Format of image meta-data header are described below Notice that some of the elements in the header is reserved for future expansion and they are not used in this version of bootloader implementation           Offset  Name  Description      Metadata Header    0x00:0x07  Filler  Set to all zero    0x08:0x0D  MANU_IDENTIFIER *  “MCHP” ASCII String Identifier    0x0C:0x0F  Filler  Set to all zero    0x10:0x13  SEQ_NUM *  Metadata Sequence Number of the image (little endian) Monotonically decreasing image index Values of 0 or 0xFFFFFFFF indicate that the image is invalid    0x14  MD_REV  Metadata Revision This field must be set to 0x02 for this version of metadata header    0x15  CONT_IDX   Container Index 1: Plain firmware image 2: Encrypted firmware image     0x16  MD_AUTH_MTHD *   Metadata authentication method 0: None 1: SHA-256 2: ECDSA p256 + SHA-256     0x17  MD_AUTH_KEY   Key index for authenticating metadata 0: IB Key 1: Key #2 Reserved for future use Not for MD_REV 0x01     0x18  PL_DEC_MTHD   Payload Decryption method 0: Plain 1: AES     0x19  PL_DEC_KEY   Key index for decrypting payload 0: Key #1 1: Key #2     0x1A:0x1B  PL_LEN  Metadata payload length The payload length for this version should be 0x55    Metadata Payload = Firmware Image Header    0x1C:0x1F  FW_IMG_REV *  Firmware Image revision (little endian)    0x20:0x23  FW_IMG_LEN  Firmware Image length    0x24  FW_IMG_AUTH_MTHD *   Firmware Image authentication method For Chimera the acceptable method are ECDSA p256 + SHA-256 0: None 1: SHA-256 2: ECDSA p256 + SHA-256     0x25  FW_IMG_AUTH_KEY   Firmware Image authentication key index 0: IB key 1: Key #2     0x26  FW_IMG_DEC_MTHD   Firmware Image decryption method 0: Plain 1: AES Reserved for future use Not for MD_REV 0x01     0x27  FW_IMG_DEC_KEY   Firmware Image decryption key index 0: Key #1 1: Key #2 Reserved for future use Not for MD_REV 0x01     0x28  FW_IMG_SIG_SZ  Firmware Image signature size    0x29:0x70  FW_IMG_SIG   Firmware Image Signature The concatenated R and S term of the ECDSA signature (P-256) of the SHA-256 hash of the firmware image     Metadata Footer    0x1B7  MD_SIG_SZ  Metadata payload signature size    0x1B8:0x1FF  MD_SIG   Metadata payload signature The concatenated R and S term of the ECDSA signature (P-256r1) of the SHA-256 hash of the metadata payload (firmware image header)        * Configurable by user  Working of Bootloader  when the application receives new image from a server or via a tool it will/should store in the Slot 1 location with meta data header firmware and it should trigger software reset so that bootloader code runs  Bootloader checks for valid image in Slot 1 by reading the meta data header and firmware and authenticating the same with the selected authentication method If valid image is found and successfully authenticated then  Erases Slot 0  Copies the Slot 1 image to Slot 0  Verifies the Copy  After that it checks for valid image in Slot 0 by validating it it jumps to the application if valid image is found  Bootloader usage with DFU  bootloader programmed to the MCU (in DFU mode) receives an application image from the host over serial interface and writes it to the internal flash in Slot 1 After loading new image on slot 1 if reset is triggered then bootloader erases the slot 0 copies the image from slot 1 to slot 0 verifies the copy procedure erases the slot 1 Then bootloader jumps to application which is the new application image  Bootloader stores information about the image in Meta Data Header This is basically size of 0x200 bytes and gets stored at the start of slot Bootloader reads this meta data header and does the authentication procedure based on the information in meta data header  Flow Diagram of Bootloader  The detailed flow diagram of bootloader with the optional DFU block can be found below   ",
							" Configuration Options  Default configuration options window for bootloader is shown below   Enable Console option  By enabling this option Information on bootloader activities will printed into console using SERCOM UART By Default this option is disabled When this option is enabled make sure to connect the UART dependency in the bootloader with the SERCOM UART  ECC Public Key  By default ECC Public key is 0xc2 0x81 0x8f 0xbb 0x28 0x61 0x47 0x8b 0xa2 0x53 0x37 0x79 0xd4 0x63 0x18 0x7c 0x8b 0x41 0x59 0xa9 0x5f 0x0b 0x6b 0x94 0x4e 0xb9 0x57 0xa1 0x03 0xfe 0x20 0xbf 0x2b 0xb8 0x14 0x2a 0x64 0xb5 0xae 0x4a 0x83 0x80 0xdd 0xe6 0xee 0x29 0x89 0xdd 0xa0 0x9a 0xc7 0xda 0x82 0xeb 0x56 0x62 0x90 0x5d 0x66 0xc5 0xbc 0x30 0x3c 0x84  User should be able to change this key by changing the text box  Supported Authentication Methods  Three methods of authentication is supported in the bootloader  None  SHA-256  ECDSA-256   By Default all these three modes are enabled If customer want to use a specific authentication alone for security aspect they can choose that alone  Enable Bootloader UART DFU option  By enabling this option UART DFU (Device Firmware Upgrade) functionality will be enabled in the bootloader DFU can be used to upgrade firmware on a target device through serially (UART) By Default this option is disabled When this option is enabled make sure to connect the UART dependency in the bootloader with the SERCOM UART  There are two UART DFU Modes  GPIO Trigger DFU Mode  Timer Based Trigger DFU Mode   DFU : GPIO Trigger DFU Mode Default Configuration   GPIO Trigger DFU Mode  In this mode DFU functionality is enabled when you hold the GPIO button and press reset button to put the bootloader into the DFU mode  Use GPIO Port and Pin option to change the port and pin based on the board With PIC32CXBZ2 Curiosity board GPIO PB4 is used as user button The above default settings are based on this User can change if different board is used   Timer based Trigger DFU Mode  In order to use timer-based trigger DFU Mode where bootloader will be in DFU Mode for the defined amount of time before jumping to the application select the DFU mode to Timer Based Trigger Change the DFU wait time if needed DFU wait time is the time (in milliseconds) where the bootloader will be in DFU mode before jumping to the application   ",
							" DFU Functionality - Serial image bootloader  DFU the device firmware upgrade in bootloader is used to load new image which is received from host over serial interface and writes into the flash(Slot 1) The host may be python script or pc tool  There are two possible ways the device bootloader can be put into DFU mode  GPIO trigger DFU Mode  By holding GPIO pin/button and resetting the board helps to enter DFU mode  Timer based trigger DFU Mode Upon boot bootloader enters into DFU mode and will be in DFU mode for the defined time for example: 600ms then upon timeout control jumps to application So the host application/script should be sending messages to load the new image very frequently so that when reset is triggered it loads the new image since the bootloader will be in DFU mode   ",
							" Bootloader API Usage  The following macros typedef functions defintions help for generic functions of bootloader  ",
							" FW_IMAGE_BLOCK_SIZE Macro ",
							" C #define FW_IMAGE_BLOCK_SIZE 4096 ",
							" Description Firmware Image Block Size ",
							" FW_IMAGE_EXPECTED_CONT_IDX Macro ",
							" C #define FW_IMAGE_EXPECTED_CONT_IDX 1 ",
							" Description Firmware Image Expected Continuous Index ",
							" FW_IMAGE_EXPECTED_PL_LEN Macro ",
							" C #define FW_IMAGE_EXPECTED_PL_LEN 0xE0 ",
							" Description Firmware Image Expected Payload Length ",
							" HEADER_SIZE Macro ",
							" C #define HEADER_SIZE 512 ",
							" Description The size of the reserved header block ",
							" IMG_MEM_TOPOLOGY_COUNT Macro ",
							" C /** Image Memory Topology Count - Number of Image memory slots */ #define IMG_MEM_TOPOLOGY_COUNT 1 //5 ",
							" Description Image Memory Topology Count - Number of Image memory slots ",
							" MAX_AUTH_KEY_LEN Macro ",
							" C #define MAX_AUTH_KEY_LEN 48 ",
							" Description Maximum Authentication Key Length ",
							" MAX_MEM_TOPOLOGIES Macro ",
							" C /** Maximum memory topologies on the device (one SRAM and one Flash)) */ #define MAX_MEM_TOPOLOGIES 2 ",
							" Description Maximum memory topologies on the device (one SRAM and one Flash)) ",
							" MAX_SLOTS Macro ",
							" C #define MAX_SLOTS 3 ",
							" Description The maximum possible number of slots (one SRAM slot and 2 Flash slots)) ",
							" METADATA_HEADER_SIZE Macro ",
							" C #define METADATA_HEADER_SIZE 0x200 ",
							" Description Size of the MetaData header ",
							" SLOT_PARAMS Struct ",
							" C typedef struct { // Header Offset uint32_t hdrOffset; // Slot Size uint32_t slotSize[2]; // Executable flag bool executable; }SLOT_PARAMS; ",
							" Description Defines the slot information ",
							" SLOT0_BASE_ADDR Macro ",
							" C #define SLOT0_BASE_ADDR 0x01000000 ",
							" Description Base Address of Slot 0 ",
							" SLOT0_FIRMWARE Macro ",
							" C #define SLOT0_FIRMWARE (SLOT0_BASE_ADDR + METADATA_HEADER_SIZE) ",
							" Description Slot 0 Firmware Start Address ",
							" SLOT0_HEADER Macro ",
							" C #define SLOT0_HEADER SLOT0_BASE_ADDR ",
							" Description Slot 0 Header Start Address ",
							" SLOT1_BASE_ADDR Macro ",
							" C #define SLOT1_BASE_ADDR 0x01080000 ",
							" Description Base Address of Slot 1 ",
							" SLOT1_FIRMWARE Macro ",
							" C #define SLOT1_FIRMWARE (SLOT1_BASE_ADDR + METADATA_HEADER_SIZE) ",
							" Description Slot 1 Firmware Start Address ",
							" SLOT1_HEADER Macro ",
							" C #define SLOT1_HEADER SLOT1_BASE_ADDR ",
							" Description Slot 1 Header Start Address ",
							" UNAUTH_FW_SIZE Macro ",
							" C #define UNAUTH_FW_SIZE 0xFFFFFFFF ",
							" Description Size of the UnAuthenticated Firmware Size - For Error purpose ",
							" AUTH_STATUS Enum ",
							" C typedef enum { AUTH_STATUS_BUSY = 0x530839fa AUTH_STATUS_FAILED = 0xe97d40ce AUTH_STATUS_SUCCESS = 0x0ac60ce4 } AUTH_STATUS; ",
							" Description Identifies the possible authentication statuses ",
							" DEVICE_CONTEXT Struct ",
							" C typedef struct { // Valid Toplogies const IMG_MEM_TOPOLOGY * validTops[MAX_MEM_TOPOLOGIES]; // Valid slots information VALID_SLOT validSlots[MAX_SLOTS]; // Number of Topologies uint8_t topologyCount; // Number of slots uint8_t slotCount; } DEVICE_CONTEXT; ",
							" Description Defines the device context information ie valid tops and valid slots ",
							" IMG_MEM_INTERFACE Struct ",
							" C typedef struct { //Memory Initialize IMG_MEM_INITIALIZE fInit; // Memory Write IMG_MEM_WRITE fWrite; // Memory Read IMG_MEM_READ fRead; // Memory Erase IMG_MEM_ERASE fErase; // Memory Read JEDEC Identifier IMG_MEM_READ_JEDEC_ID fReadId; } IMG_MEM_INTERFACE; ",
							" Description Defines the image memory interface functions for initialization read write erase and read id ",
							" IMG_MEM_TOPOLOGY Struct ",
							" C typedef struct { uint16_t u16ErasePageSz; // Erase page size uint16_t u16ProgRowSz; // Programming row size uint32_t u32UmmAddrStart; // Unified memory model address start uint32_t u32TotSize; // Total flash size uint8_t u8SlotCount; // Count of slots in memory const SLOT_PARAMS * pSlots; // Pointer to array of slot structs uint32_t u32CalIdx; // Index of calibration data const IMG_MEM_INTERFACE * ifFlash; // Flash interface uint8_t u8DevIdCount; // Count of valid device IDs const uint32_t * pDevIds; // Pointer to array of device IDs uint32_t u32DevIdMask; // Device ID negative mask uint32_t u32AddrPosMask; // UMM address positive mask uint32_t u32AddrNegMask; // UMM addr negative mask uint32_t u32BlankCheck; // UMM addr negative mask }IMG_MEM_TOPOLOGY; ",
							" Description Defines the image memory interface topology defintions ",
							" VALID_SLOT Struct ",
							" C typedef struct { // Firmware Image Header FW_IMG_HDR * pHdr; // Slot Information const SLOT_PARAMS * pSlot; // Topology Information const IMG_MEM_TOPOLOGY * pTop; } VALID_SLOT; ",
							" Description Defines the valid slot information like header slot number etc ",
							" FW_IMG_HDR Struct ",
							" C typedef struct { // Meta Data Sequence Number uint32_t MD_SEQ_NUM; // Meta Data Revision uint8_t MD_REV; // Meta Data Container Index uint8_t MD_CONT_IDX; // Meta Data Payload Length uint16_t MD_PL_LEN; // Meta Data Coherence uint32_t MD_COHERENCE; // Meta Data Authentication Method uint8_t MD_AUTH_METHOD; // Meta Data Authentication Key uint8_t MD_AUTH_KEY; // Meta Data Decryption Method uint8_t MD_DEC_METHOD; // Meta Data Decryption Key uint8_t MD_DEC_KEY; // Firmware Image Revision uint32_t FW_IMG_REV; // Firmware Image Source Address uint32_t FW_IMG_SRC_ADDR; // Firmware Image Destionation Address uint32_t FW_IMG_DST_ADDR; // Firmware Image Image Length uint32_t FW_IMG_LEN; // Firmware Image Authentication Method uint8_t FW_IMG_AUTH_METHOD; // Firmware Image Authentication Key uint8_t FW_IMG_AUTH_KEY; // Firmware Image Decryption Method uint8_t FW_IMG_DEC_METHOD; // Firmware Image Decryption Key uint8_t FW_IMG_DEC_KEY; // Firmware Image Signature uint8_t FW_IMG_SIG[96]; // PAT Image Source Address uint32_t PAT_IMG_SRC_ADDR; // PAT Image Destination Address uint32_t PAT_IMG_DST_ADDR; // PAT Image Length uint32_t PAT_IMG_LEN; // PAT Image Signature uint8_t PAT_IMG_SIG[96]; // MetaData Signature uint8_t MD_SIG[96]; } FW_IMG_HDR; ",
							" Description Defines the firmware image header information used in bootloader ",
							" IMG_MEM_AuthenticateHeaderStart Function ",
							" C bool IMG_MEM_AuthenticateHeaderStart(uint8_t * digest FW_IMG_HDR * hdr uint8_t * x uint8_t * y); ",
							" Description This function begin a header authentication operation Note: This function must not be called while the Public Key engine is in use ",
							" Parameters Param Description digest 48-byte buffer for the hash digest (maintain until authentication done) ctx A hash context (this must persist ) hdr Pointer to a firmware image header x The x term of an ECDSA P-384 public key y The y term of an ECDSA P-384 public key ",
							" Returns status of the authentication start ",
							" IMG_MEM_FindValidTopologies Function ",
							" C void IMG_MEM_FindValidTopologies(DEVICE_CONTEXT * ctx); ",
							" Description This function populate the DEVICE_CONTEXT structure with the valid topologies for the device and the count of valid topologies ",
							" Parameters Param Description ctx Device context ",
							" Returns None ",
							" IMG_MEM_SlotSort Function ",
							" C void IMG_MEM_SlotSort(DEVICE_CONTEXT * ctx); ",
							" Description This function sorts valid slots by priority ",
							" Parameters Param Description ctx A device context structure with cached and validated header pointers in the header slots ",
							" Returns None ",
							" IMG_MEM_ValidateHeader Function ",
							" C bool IMG_MEM_ValidateHeader(DEVICE_CONTEXT * ctx FW_IMG_HDR * fwHdr); ",
							" Description This function validate a header Criteria - Metadata revision Sequence number (not 0 or 0xFFFFFFFF) rollback counter image len % 4096 = 0 firmware and header auth method is ECDSA on P-384 encryption methods are None Firmware image header is 0xE0 bytes metadata container index is 1 ",
							" Parameters Param Description ctx A device context structure fwHdr Firmware image header pointer top Pointer to an image memory topology ",
							" Returns FW_IMG_HDR Firmware image header pointer ",
							" C IMG_MEM_TOPOLOGY* IMG_MEM_GetTopologyByAddress (DEVICE_CONTEXT * ctx ",
							" Description This function returns a topology based on a specific address Prerequisite: ctx initialized with FindValidTopologies ",
							" Parameters Param Description ctx A device context structure address address to get topology top Pointer to an image memory topology ",
							" Returns IMG_MEM_TOPOLOGY topology pointer or NULL ",
							" IMG_MEM_AuthenticateHeaderStatusGet Function ",
							" C AUTH_STATUS IMG_MEM_AuthenticateHeaderStatusGet(void); ",
							" Description This function check the status of a header authentication operation Prerequisite: Header authentication started with IMG_MEM_AuthenticateHeaderStart ",
							" Parameters None ",
							" Returns AUTH_STATUS Success failure or busy (no result available) ",
							" IMG_MEM_CacheAndValidateHeaders Function ",
							" C void IMG_MEM_CacheAndValidateHeaders(DEVICE_CONTEXT * ctx uint8_t * buffer); ",
							" Description This function cache validate and sort headers from all firmware image slots for valid topologies Prerequisite: ctx initialized with FindValidTopologies ",
							" Parameters Param Description ctx A device context structure buffer A buffer for cached headers (HEADER_SIZE MAX_SLOTS bytes) ",
							" Returns None ",
							" IMG_MEM_CacheHeader Function ",
							" C FW_IMG_HDR* IMG_MEM_CacheHeader(DEVICE_CONTEXT * ctx ",
							" Description This function cache a header from a firmware image slot ",
							" Parameters Param Description ctx A context structure top Pointer to an image memory topology pSlot The image header slot to cache the header from buffer Pointer to a buffer in which to cache the header bufSlot Offset in the buffer in HEADER_SIZE units If a header is cached the contents of this pointer will be incremented by 1 ",
							" Returns FW_IMG_HDR Firmware image header pointer ",
							" DFU API Usage  The following macros typedef functions defintions help to understand DFU functionality of bootloader  ",
							" dfu Function ",
							" C void dfu(const IMG_MEM_TOPOLOGY ** tops uint8_t count); ",
							" Description This routine will initiate the device firmware upgrade where it waits for commands and response for commands received from serial ",
							" Parameters Param Description IMG_MEM_TOPOLOGY tops valid toplogies list uint8_t count number of valid topologies ",
							" Returns None ",
							" program_exec_main Function ",
							" C int32_t program_exec_main(const IMG_MEM_TOPOLOGY ** tops uint8_t count); ",
							" Description This routine is the entry point for the programming executive It receives commands from the host dispatches the command and then sends response back to the host ",
							" Parameters Param Description IMG_MEM_TOPOLOGY tops valid toplogies list uint8_t count number of valid topologies ",
							" Returns None ",
							" Crc32Init Function ",
							" C void Crc32Init(uint16_t seed); ",
							" Description This routine initializes the CRC32 operation ",
							" Parameters Param Description uint16_t seed seed for CRC calculation ",
							" Returns None ",
							" Crc32Add Function ",
							" C void Crc32Add(uint8_t* pBuff uint32_t bSize); ",
							" Description This routine adds the given data into CRC32 caculation and calculates CRC ",
							" Parameters Param Description uint8_t pBuff pointer to the data to add uint32_t bSize size of the data to add ",
							" Returns None ",
							" Crc32Result Function ",
							" C uint32_t Crc32Result(void); ",
							" Description This routine gets/returns the calculated CRC ",
							" Parameters None ",
							" Returns uint32_t - Calculated CRC ",
							" UART_ERROR Enum ",
							" C typedef enum { // UART - No Error UART_ERROR_NONE = 0 // UART - Overrun error UART_ERROR_OVERRUN = 0x02 // UART - Framing error UART_ERROR_FRAMING = 0x04 // UART - Parity error UART_ERROR_PARITY = 0x08 } UART_ERROR; ",
							" UART_Init Function ",
							" C void UART_Init(void); ",
							" Description This function initializes UART for read notifcation and thershold setting ",
							" Parameters None ",
							" Returns None ",
							" UART_Read Function ",
							" C uint32_t UART_Read(uint8_t *rb const uint32_t len const int32_t wait); ",
							" Description This function reads the SERCOM UART for the given length ",
							" Parameters Param Description rb read buffer len length to read wait wait timeout ",
							" Returns None ",
							" UART_Write Function ",
							" C void UART_Write(int8_t *wb uint32_t len); ",
							" Description This function writes the given buffer in SERCOM UART for the given length ",
							" Parameters Param Description wb write buffer len length to write ",
							" Returns None ",
							" PIC32CX-BZ2 Bootloader Services Component Help  The PIC32CX-BZ2 Bootloader Services is a utility which helps in creating signed firmware image for OTA with the provided header and OTA header information Please follow MCC Project Graph and how to add Bootloader services component which is available in Device Resources - Libraries → Harmony → Wireless → Bootloader Services  Bootloader services utility functional activities with Harmony 3 code generation  Adds the autoload py script which gets loaded in the project (See Screenshot) for getting the required information from user for creating signed Firmware  Please find the description below on the labels        Label Name  Description      Sequence Number  Sequence Number in 64bit Hex format range from 0x00000001 to 0xFFFFFFFE    Manufacture ID  Identifier of the Manufacturer up to 4 ASCII characters    Auth Method  Authentication Method The supported authentication methods are None SHA256 and ECDSA256-SHA256    Firmware Revision  Revision of the firmware It is in the format of x x x x where x is value in range 0-255    Private Key File  Key used for ECDSA Authentication It is in PKCS#8 fromat This label is enabled only if Auth method is ECDSA256-SHA256     The complete image including firmware and meta header is signed by the below process  Bootloader services help in embedding OTA header information as part of the signed firmware binary image which can be done with OTA tab Output File Type as BLE OTA File Output File Type as Zigbee OTA File Output File Type as Combo OTA File   Please find the below table which includes the description of the label’s/parameter’s used        Label Name  Description      Output File Name  Output File Name for the OTA package in binary format    Output File Encryption  Option to choose whether to Encrypt the OTA package or not Unencrypted /encrypted    AES Key  This option is enabled only if Output File Encryption is set to encrypted 128bit AES key to encrypt the OTA package with AES-CBC-128    Init Vector  This option is enabled only if Output File Encryption is set to encrypted 128bit Initial Vector to encrypt the OTA package with AES-CBC-128    Output File Type  Output file types are among BLE Zigbee or Combo OTA operation    Flash Image ID  This option is enabled only if Output File file is set to BLE OTA File or Combo OTA File It is the 32bit Identification Number for App layer to confirm the new Flash Image is acceptable    Manufacture Code  This option is enabled only if Output File file is set to Zigbee OTA File or Combo OTA File It is the 16-bit manufacturer identifier used to match supported devices Defaults to 0xFFFF (match all)    Image Type  This option is enabled only if Output File file is set to Zigbee OTA File or Combo OTA File It is the 16-bit image type Defaults to 0xFFFF (match all)    File Version  This option is enabled only if Output File file is set to Zigbee OTA File or Combo OTA File It is the 32-bit integer representing the file version Can be in the recommended format (8-bit app release 8-bit app build 8 bit stack release 8-bit stack build) simple increasing version or an unsupported version format If in an unsupported version format the OTA Cluster will not be able to compare file versions Defaults to 0x0000    Stack Version  This option is enabled only if Output File file is set to Zigbee OTA File or Combo OTA File It is the 16-bit identifier of the zigbee stack version Defaults to 0x02 for zigbee Pro    Header String  This option is enabled only if Output File file is set to Zigbee OTA File or Combo OTA File It is the 32-byte string used by each manufacturer as they see fit but recommended to be human readable    Security Credential Version  This option is enabled only if Output File file is set to Zigbee OTA File or Combo OTA File It is the optional 8-bit identifier of the Security Credential Version Defaults to not included    Upgrade File Destination  This option is enabled only if Output File file is set to Zigbee OTA File or Combo OTA File It is the optional 64-bit extended address of the device to which this image is specific Defaults to not include image is available to all devices    Minimum Hardware Version  This option is enabled only if Output File file is set to Zigbee OTA File or Combo OTA File It is the optional 0/16-bit integer representing the earliest hardware platform this image can be used on    Maximum Hardware Version  This option is enabled only if Output File file is set to Zigbee OTA File or Combo OTA File It is the optional 16-bit integer representing the latest hardware platform this image can be used on     Bootloader services generates linker script with the below memory layout which lets the stack to store the image in Slot 1 during stack OTA process    ",
							" Microchip Information ",
							" The Microchip Website  Microchip provides online support via our website at This website is used to make files and information easily available to customers Some of the content available includes:   Product Support – Data sheets and errata application notes and sample programs design resources user’s guides and hardware support documents latest software releases and archived software  General Technical Support – Frequently Asked Questions (FAQs) technical support requests online discussion groups Microchip design partner program member listing  Business of Microchip – Product selector and ordering guides latest Microchip press releases listing of seminars and events listings of Microchip sales offices distributors and factory representatives   ",
							" Product Change Notification Service  Microchip’s product change notification service helps keep customers current on Microchip products Subscribers will receive email notification whenever there are changes updates revisions or errata related to a specified product family or development tool of interest  To register go to and follow the registration instructions  ",
							" Customer Support  Users of Microchip products can receive assistance through several channels:   Distributor or Representative  Local Sales Office  Embedded Solutions Engineer (ESE)  Technical Support   Customers should contact their distributor representative or ESE for support Local sales offices are also available to help customers A listing of sales offices and locations is included in this document  Technical support is available through the website at:  ",
							" Microchip Devices Code Protection Feature  Note the following details of the code protection feature on Microchip products:   Microchip products meet the specifications contained in their particular Microchip Data Sheet  Microchip believes that its family of products is secure when used in the intended manner within operating specifications and under normal conditions  Microchip values and aggressively protects its intellectual property rights Attempts to breach the code protection features of Microchip product is strictly prohibited and may violate the Digital Millennium Copyright Act  Neither Microchip nor any other semiconductor manufacturer can guarantee the security of its code Code protection does not mean that we are guaranteeing the product is “unbreakable” Code protection is constantly evolving Microchip is committed to continuously improving the code protection features of our products   ",
							" Legal Notice  This publication and the information herein may be used only with Microchip products including to design test and integrate Microchip products with your application Use of this information in any other manner violates these terms Information regarding device applications is provided only for your convenience and may be superseded by updates It is your responsibility to ensure that your application meets with your specifications Contact your local Microchip sales office for additional support or obtain additional support at   THIS INFORMATION IS PROVIDED BY MICROCHIP \"AS IS\" MICROCHIP MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND WHETHER EXPRESS OR IMPLIED WRITTEN OR ORAL STATUTORY OR OTHERWISE RELATED TO THE INFORMATION INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR WARRANTIES RELATED TO ITS CONDITION QUALITY OR PERFORMANCE  IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT SPECIAL PUNITIVE INCIDENTAL OR CONSEQUENTIAL LOSS DAMAGE COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE INFORMATION OR ITS USE HOWEVER CAUSED EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE TO THE FULLEST EXTENT ALLOWED BY LAW MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY RELATED TO THE INFORMATION OR ITS USE WILL NOT EXCEED THE AMOUNT OF FEES IF ANY THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THE INFORMATION  Use of Microchip devices in life support and/or safety applications is entirely at the buyer's risk and the buyer agrees to defend indemnify and hold harmless Microchip from any and all damages claims suits or expenses resulting from such use No licenses are conveyed implicitly or otherwise under any Microchip intellectual property rights unless otherwise stated  ",
							" Trademarks  The Microchip name and logo the Microchip logo Adaptec AVR AVR logo AVR Freaks BesTime BitCloud CryptoMemory CryptoRF dsPIC flexPWR HELDO IGLOO JukeBlox KeeLoq Kleer LANCheck LinkMD maXStylus maXTouch MediaLB megaAVR Microsemi Microsemi logo MOST MOST logo MPLAB OptoLyzer PIC picoPower PICSTART PIC32 logo PolarFire Prochip Designer QTouch SAM-BA SenGenuity SpyNIC SST SST Logo SuperFlash Symmetricom SyncServer Tachyon TimeSource tinyAVR UNI/O Vectron and XMEGA are registered trademarks of Microchip Technology Incorporated in the U S A and other countries  AgileSwitch APT ClockWorks The Embedded Control Solutions Company EtherSynch Flashtec Hyper Speed Control HyperLight Load Libero motorBench mTouch Powermite 3 Precision Edge ProASIC ProASIC Plus ProASIC Plus logo Quiet- Wire SmartFusion SyncWorld Temux TimeCesium TimeHub TimePictra TimeProvider TrueTime and ZL are registered trademarks of Microchip Technology Incorporated in the U S A  Adjacent Key Suppression AKS Analog-for-the-Digital Age Any Capacitor AnyIn AnyOut Augmented Switching BlueSky BodyCom Clockstudio CodeGuard CryptoAuthentication CryptoAutomotive CryptoCompanion CryptoController dsPICDEM dsPICDEM net Dynamic Average Matching DAM ECAN Espresso T1S EtherGREEN GridTime IdealBridge In-Circuit Serial Programming ICSP INICnet Intelligent Paralleling IntelliMOS Inter-Chip Connectivity JitterBlocker Knob-on-Display KoD maxCrypto maxView memBrain Mindi MiWi MPASM MPF MPLAB Certified logo MPLIB MPLINK MultiTRAK NetDetach Omniscient Code Generation PICDEM PICDEM net PICkit PICtail PowerSmart PureSilicon QMatrix REAL ICE Ripple Blocker RTAX RTG4 SAM-ICE Serial Quad I/O simpleMAP SimpliPHY SmartBuffer SmartHLS SMART-I S storClad SQI SuperSwitcher SuperSwitcher II Switchtec SynchroPHY Total Endurance Trusted Time TSHARC USBCheck VariSense VectorBlox VeriPHY ViewSpan WiperLock XpressConnect and ZENA are trademarks of Microchip Technology Incorporated in the U S A and other countries  SQTP is a service mark of Microchip Technology Incorporated in the U S A  The Adaptec logo Frequency on Demand Silicon Storage Technology and Symmcom are registered trademarks of Microchip Technology Inc in other countries  GestIC is a registered trademark of Microchip Technology Germany II GmbH Co KG a subsidiary of Microchip Technology Inc in other countries  All other trademarks mentioned herein are property of their respective companies  © Microchip Technology Incorporated and its subsidiaries All Rights Reserved  ISBN:  ",
							" Quality Management System   For information regarding Microchip’s Quality Management Systems please visit    ",
							" Worldwide Sales and Service          AMERICAS  ASIA/PACIFIC  ASIA/PACIFIC  EUROPE       Corporate Office  2355 West Chandler Blvd  Chandler AZ 85224-6199  Tel: 480-792-7200  Fax: 480-792-7277  Technical Support:   Web Address:   Atlanta  Duluth GA  Tel: 678-957-9614  Fax: 678-957-1455  Austin TX  Tel: 512-257-3370  Boston  Westborough MA  Tel: 774-760-0087  Fax: 774-760-0088  Chicago  Itasca IL  Tel: 630-285-0071  Fax: 630-285-0075  Dallas  Addison TX  Tel: 972-818-7423  Fax: 972-818-2924  Detroit  Novi MI  Tel: 248-848-4000  Houston TX  Tel: 281-894-5983  Indianapolis  Noblesville IN  Tel: 317-773-8323  Fax: 317-773-5453  Tel: 317-536-2380  Los Angeles  Mission Viejo CA  Tel: 949-462-9523  Fax: 949-462-9608  Tel: 951-273-7800  Raleigh NC  Tel: 919-844-7510  New York NY  Tel: 631-435-6000  San Jose CA  Tel: 408-735-9110  Tel: 408-436-4270  Canada - Toronto  Tel: 905-695-1980  Fax: 905-695-2078    Australia - Sydney  Tel: 61-2-9868-6733  China - Beijing  Tel: 86-10-8569-7000  China - Chengdu  Tel: 86-28-8665-5511  China - Chongqing  Tel: 86-23-8980-9588  China - Dongguan  Tel: 86-769-8702-9880  China - Guangzhou  Tel: 86-20-8755-8029  China - Hangzhou  Tel: 86-571-8792-8115  China - Hong Kong SAR  Tel: 852-2943-5100  China - Nanjing  Tel: 86-25-8473-2460  China - Qingdao  Tel: 86-532-8502-7355  China - Shanghai  Tel: 86-21-3326-8000  China - Shenyang  Tel: 86-24-2334-2829  China - Shenzhen  Tel: 86-755-8864-2200  China - Suzhou  Tel: 86-186-6233-1526  China - Wuhan  Tel: 86-27-5980-5300  China - Xian  Tel: 86-29-8833-7252  China - Xiamen  Tel: 86-592-2388138  China - Zhuhai  Tel: 86-756-3210040    India - Bangalore  Tel: 91-80-3090-4444  India - New Delhi  Tel: 91-11-4160-8631  India - Pune  Tel: 91-20-4121-0141  Japan - Osaka  Tel: 81-6-6152-7160  Japan - Tokyo  Tel: 81-3-6880- 3770  Korea - Daegu  Tel: 82-53-744-4301  Korea - Seoul  Tel: 82-2-554-7200  Malaysia - Kuala Lumpur  Tel: 60-3-7651-7906  Malaysia - Penang  Tel: 60-4-227-8870  Philippines - Manila  Tel: 63-2-634-9065  Singapore  Tel: 65-6334-8870  Taiwan - Hsin Chu  Tel: 886-3-577-8366  Taiwan - Kaohsiung  Tel: 886-7-213-7830  Taiwan - Taipei  Tel: 886-2-2508-8600  Thailand - Bangkok  Tel: 66-2-694-1351  Vietnam - Ho Chi Minh  Tel: 84-28-5448-2100    Austria - Wels  Tel: 43-7242-2244-39  Fax: 43-7242-2244-393  Denmark - Copenhagen  Tel: 45-4485-5910  Fax: 45-4485-2829  Finland - Espoo  Tel: 358-9-4520-820  France - Paris  Tel: 33-1-69-53-63-20  Fax: 33-1-69-30-90-79  Germany - Garching  Tel: 49-8931-9700  Germany - Haan  Tel: 49-2129-3766400  Germany - Heilbronn  Tel: 49-7131-72400  Germany - Karlsruhe  Tel: 49-721-625370  Germany - Munich  Tel: 49-89-627-144-0  Fax: 49-89-627-144-44  Germany - Rosenheim  Tel: 49-8031-354-560  Israel - Ra’anana  Tel: 972-9-744-7705  Italy - Milan  Tel: 39-0331-742611  Fax: 39-0331-466781  Italy - Padova  Tel: 39-049-7625286  Netherlands - Drunen  Tel: 31-416-690399  Fax: 31-416-690340  Norway - Trondheim  Tel: 47-72884388  Poland - Warsaw  Tel: 48-22-3325737  Romania - Bucharest  Tel: 40-21-407-87-50  Spain - Madrid  Tel: 34-91-708-08-90  Fax: 34-91-708-08-91  Sweden - Gothenberg  Tel: 46-31-704-60-40  Sweden - Stockholm  Tel: 46-8-5090-4654  UK - Wokingham  Tel: 44-118-921-5800  Fax: 44-118-921-5820       "];

